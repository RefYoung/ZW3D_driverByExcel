/**
@file zwapi_util.h
@copyright (C) Copyright 2022, ZWSOFT CO., LTD. (Guangzhou) All Rights Reserved.
@note THE HEADER FILE FOR THE ZW3D Generic Data Types and Structures
*/
/**
@defgroup zwapi_util Common Data
@ingroup CommonModel
@brief
@details THE MODULE FOR THE ZW3D Generic Data Types and Structures
*/

#pragma once
#ifndef ZW_API_UTIL_H /* this ifndef surrounds entire header */
#define ZW_API_UTIL_H

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

/**  
@brief API version number 
@ingroup zwapi_util
*/
#define VX_API_VERSION 2805

    //====================================================================================================================
    /** @name Function Return Error Type */
    //====================================================================================================================
    /**
    @brief the return value of the API interfaces
    @ingroup zwapi_util
    */
    typedef enum evxErrors
    {
        /*  success */
        ZW_API_NO_ERROR = 0, /**<@brief  no error */

        /*  -1/1 is used as an interface custom return value */

        /*  ZW3D internal function fails  */
        ZW_API_GENERAL_ERROR = -10000, /**<@brief  general error */

        /*  root environment error */
        ZW_API_ROOT_OBJ_ACT_FAIL            = -5, /**<@brief  could not activate the current root object */
        ZW_API_WRONG_ROOT_ENV               = -6, /**<@brief  wrong type for the active root object (the root need to be part/sketch/drawing/cam, but is not) */
        ZW_API_ROOT_SINGLE_MULTI_TYPE_ERROR = -7, /**<@brief  wrong file type. either the file is single-object where a multi-object file is required, or
                                              the file is multi-object where a single-object file is required */
        ZW_API_ROOT_ERROR                   = -8, /**<@brief  the specified root can't be found */

        /*  input/ output error */
        ZW_API_INVALID_INPUT    = -31, /**<@brief  input parameter is invalid (pointer is NULL, object's id < 1, out of input vlaue...)*/
        ZW_API_INPUT_ERROR      = -32, /**<@brief  input error, an error occurred while preparing input data for zw3d command (cvxDataSet). */
        ZW_API_INPUT_TYPE_ERROR = -33, /**<@brief  the the input object doesn't match the required one */
        ZW_API_INVALID_OUTPUT   = -34, /**<@brief  output parameter is invalid */

        /*  file fail */
        ZW_API_FILE_LOCATE_FAIL = -61, /**<@brief  fail to locate the specified file. an error occurred when the file can't be found in the search path, current file path etc. */
        ZW_API_FILE_ERROR       = -62, /**<@brief  the specified file does not exist in memory */

        /*  object error */
        ZW_API_OBJ_TYPE_ERROR     = -91, /**<@brief  the type of the specified object is wrong */
        ZW_API_OBJ_DATA_GET_ERROR = -92, /**<@brief  wrong data of the object(fail to get the specified type data of the object, such as the parent feature of the shape etc.)*/
        ZW_API_OBJ_DATA_SET_ERROR = -93, /**<@brief  fail to set the specified type data of the object, such as the specified attribute of the shape etc. */
        ZW_API_INVALID_OBJ        = -94, /**<@brief  the specified object can't be find in the current environment or inactive */
        ZW_API_GET_NEW_OBJ_FAIL   = -95, /**<@brief  fail to get id of new object generated by function. */

        /*  entity path error */
        ZW_API_ENT_PATH_ERROR   = -121, /**<@brief  wrong entity pick path */
        ZW_API_INVALID_ENT_PATH = -122, /**<@brief  invalid entity pick path */

        /*  command error */
        ZW_API_CMMD_INIT_ERROR = -151, /**<@brief  command initialization failure */
        ZW_API_CMMD_EXEC_ERROR = -152, /**<@brief  command execution failure */
        ZW_API_CMMD_DATA_ERROR = -153, /**<@brief  wrong data container of the specified command(VDATA object) */
        /*  command register error */
        ZW_API_FUN_REGISTER_ERROR = -160, /**<@brief  function has been registered */
        ZW_API_FUN_UNLOAD_ERROR   = -161, /**<@brief  function hasn't been registered and unload failed */

        /*  memory error */
        ZW_API_MEMORY_ERROR = -181, /**<@brief  memory error. an error occurred while allocating memory */
        ZW_API_OUT_OF_RANGE = -182, /**<@brief  out of the memory range */

        /*  modeling data error */
        ZW_API_MODELING_DATA_ERROR    = -211, /**<@brief  geometric modeling data error */
        ZW_API_BOOLEAN_ADD_BASE_ERROR = -212, /**<@brief  boolean add failure, more than one base shapes intersect with the operator shape */

        /*  string error */
        ZW_API_INVALID_NAME        = -241, /**<@brief  invalid name, name is empty or contains some of \/:*?"<>| */
        ZW_API_INVALID_PATH        = -242, /**<@brief  invalid file path */
        ZW_API_INVALID_STRING      = -243, /**<@brief  the string is empty */
        ZW_API_PATH_LEN_OVER_RANGE = -244, /**<@brief  the file path length is over range */
        ZW_API_NAME_LEN_OVER_RANGE = -245, /**<@brief  the file name length is over range  */
        ZW_API_PATH_LEN_LESS_RANGE = -246, /**<@brief  the file path length is less 512 bytes */
        ZW_API_NAME_LEN_LESS_RANGE = -247, /**<@brief  the file name length is less 512 bytes */

        /*  UI */
        ZW_API_FORM_CREATE_FAIL = -271, /**<@brief  create form fails */
        ZW_API_FORM_SHOW_FAIL   = -272, /**<@brief  show form fails */
        ZW_API_FORM_EXIST_ERROR = -273, /**<@brief  form doesn't exist */
        ZW_API_FORM_INIT_ERROR  = -274, /**<@brief  Initialization failed */

        /* Table */
        ZW_API_TABLE_SETDATA_ERROR = -281, /**<@brief  fail to set table info */
        ZW_API_TABLE_GETDATA_ERROR = -282, /**<@brief  fail to get table info */

        /*  License */
        ZW_API_LICENSE_NESTING_ERROR = -301, /**<@brief nesting license fails */

        /*  Function */
        ZW_API_FUNCTION_CB_GET_ERROR       = -401, /**<@brief Failed to get callback function. */
        ZW_API_FUCNTION_CB_EXIST_ERROR     = -402, /**<@brief callback doesn't exist */
        ZW_API_FUCNTION_CB_EXECUTION_ERROR = -403, /**<@brief callback function execution failed */

        /*  cam operation error */
        ZW_API_CAM_OPTYPE_ERROR       = -1001, /**<@brief  wrong operation type */
        ZW_API_CAM_GETOPNAME_ERROR    = -1002, /**<@brief  fail to get operation name */
        ZW_API_CAM_GETOPBYTAC_ERROR   = -1003, /**<@brief  fail to get operation in tactic */
        ZW_API_CAM_GETOPERATION_ERROR = -1004, /**<@brief  fail to get operation in cam plan */

        /*  cam data error */
        ZW_API_CAM_GETVDATA_ERROR = -1011, /**<@brief  fail to get cam info */
        ZW_API_CAM_SETVDATA_ERROR = -1012, /**<@brief  fail to set cam info */
        ZW_API_CAM_UPVADTA_ERROR  = -1013, /**<@brief  fail to update cam info */

        /*  cam tactic error  */
        ZW_API_CAM_GETTACNAME_ERROR = -1021, /**<@brief  fail to get tactic name */
        ZW_API_CAM_GETTACTIC_ERROR  = -1022, /**<@brief  fail to get tactic in cam plan */

        /*  cam feature error */
        ZW_API_CAM_GETFTRGRP_ERROR    = -1031, /**<@brief  fail to get feature group data */
        ZW_API_CAM_GETFTRDBNAME_ERROR = -1032, /**<@brief  fail to get ftr db name */
        ZW_API_CAM_GETFTR_ERROR       = -1033, /**<@brief  fail to get feature in cam plan*/

        /*  cam setup error */
        ZW_API_CAM_GETSETUP_ERROR = -1041, /**<@brief  fail to get setup in cam plan */

        /*  cam machine error */
        ZW_API_CAM_GETMACH_ERROR     = -1051, /**<@brief  fail to get machine in cam plan */
        ZW_API_CAM_GETMACHNAME_ERROR = -1052, /**<@brief  fail to get machine name in cam plan */

        /*  cam folder error */
        ZW_API_CAM_GETFOLDER_ERROR     = -1061, /**<@brief  fail to get folder in cam plan  */
        ZW_API_CAM_GETFOLDERNAME_ERROR = -1062, /**<@brief  fail to get folder name */
        ZW_API_CAM_GETFOLDERSUB_ERROR  = -1063, /**<@brief  fail to get folder sub item */

        /*  cam tool error */
        ZW_API_CAM_GETTOOL_ERROR        = -1072, /**<@brief  fail to get tool in cam plan */
        ZW_API_CAM_GETTOOLNAME_ERROR    = -1073, /**<@brief  fail to get tool name in cam plan */
        ZW_API_CAM_GETHOLDER_ERROR      = -1073, /**<@brief  fail to get tool holder index */
        ZW_API_CAM_GETTOOLTYPE_ERROR    = -1074, /**<@brief  fail to get tool type */
        ZW_API_CAM_GETTOOLSUBTYPE_ERROR = -1075, /**<@brief  fail to get tool sub type */
        ZW_API_CAM_GETTOOLID_ERROR      = -1076, /**<@brief  fail to get tool id */
        ZW_API_CAM_GETTOOLLEN_ERROR     = -1077, /**<@brief  fail to get tool length */
        ZW_API_CAM_GETTOOLDIA_ERROR     = -1078, /**<@brief  fail to get tool diameter */
        ZW_API_CAM_GETTOOLSHAPE_ERROR   = -1079, /**<@brief  fail to get tool shape information */
        ZW_API_CAM_GETTOOLCOOLANT_ERROR = -1080, /**<@brief  fail to get tool coolant */

        /*  cam component error */
        ZW_API_CAM_GETCMCOMP_ERROR     = -1081, /**<@brief  fail to get component in cam plan */
        ZW_API_CAM_GETCOMPCLASS_ERROR  = -1082, /**<@brief  fail to get component class */
        ZW_API_CAM_GETCOMPINDEX_ERROR  = -1083, /**<@brief  fail to get component index */
        ZW_API_CAM_GETCOMPVDATA_ERROR  = -1084, /**<@brief  fail to get component database  */
        ZW_API_CAM_GETCOMPUPDATE_ERROR = -1085, /**<@brief  fail to get component database  */

        /*  cam frame error */
        ZW_API_CAM_GETFRAME_ERROR    = -1091, /**<@brief  fail to get frame in cam plan */
        ZW_API_CAM_GETACTFRAME_ERROR = -1092, /**<@brief  fail to get active frame */

        /*  cam output error */
        ZW_API_CAM_GETOUT_ERROR    = -1101, /**<@brief  fail to get output in cam plan */
        ZW_API_CAM_OUTCL_ERROR     = -1102, /**<@brief  fail to output cl */
        ZW_API_CAM_OUTNC_ERROR     = -1103, /**<@brief  fail to output nc */
        ZW_API_CAM_OUTOPLIST_ERROR = -1104, /**<@brief  fail to output excel type operation list */
        ZW_API_CAM_OUTOPHTML_ERROR = -1105, /**<@brief  fail to output html type operation list */
        ZW_API_CAM_OUTOPXML_ERROR  = -1106, /**<@brief  fail to output xml type operation list */
        ZW_API_CAM_OUTTOOL_ERROR   = -1107, /**<@brief  fail to output tool list */

        /*  cam gui error */
        ZW_API_CAM_GUITOTXT_ERROR   = -1111, /**<@brief  fail to interface parameter change to data base */
        ZW_API_CAM_GUIFROMTXT_ERROR = -1112, /**<@brief  fail to interface parameter get from data base */

        /*  cam form error */
        ZW_API_CAM_GETFORMSTATE_ERROR = -1121, /**<@brief  fail to get cam form state */
        ZW_API_CAM_FORMDEFINE_ERROR   = -1122, /**<@brief  fail to define a cam form */
        ZW_API_CAM_GETFORMITEM_ERROR  = -1123, /**<@brief  fail to get cam form item */
        ZW_API_CAM_SETFORMITEM_ERROR  = -1124, /**<@brief  fail to set cam form item */

        /*  cam tool path error */
        ZW_API_CAM_GETTPATH_ERROR     = -1131, /**<@brief  fail to get tool path index */
        ZW_API_CAM_GETTPATHINFO_ERROR = -1132, /**<@brief  fail to get tool path information */

        /*  cam spdfd error */
        ZW_API_CAM_GETSPDFD_ERROR = -1141, /**<@brief  fail to get speed and feed */
        ZW_API_CAM_SETSPDFD_ERROR = -1142, /**<@brief  fail to get speed and feed */

        /*  cam holder error */
        ZW_API_CAM_GETHOLDEREXIST_ERROR  = -1161, /**<@brief  fail to get holder existence */
        ZW_API_CAM_GETHOLDERID_ERROR     = -1162, /**<@brief  fail to get holder id */
        ZW_API_CAM_GETHOLDERINFO_ERROR   = -1163, /**<@brief  fail to get holder information */
        ZW_API_CAM_SETHOLDERINFO_ERROR   = -1164, /**<@brief  fail to set holder information */
        ZW_API_CAM_GETTOOLREGISTER_ERROR = -1165  /**<@brief  fail to get tool register */

    } evxErrors;


    //====================================================================================================================
    /** @name Basic String Types */
    //====================================================================================================================
    /**
    @brief object name (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxName[32];


    /**
    @brief long object name (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxLongName[256];


    /**
    @brief file path or file name (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxPath[256];

    /**
    @brief root object name (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxRootName[256];

    /**
    @brief arithmetic expression (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxExp[256];

    /**
    @brief variable expression (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxVarExp[1024];

    /**
    @brief file path or file name (null-terminated text string)
    @ingroup zwapi_util
    */
    typedef char vxLongPath[512];


    //====================================================================================================================
    /** @name Basic Integer Types */
    //====================================================================================================================
    /**
    @brief 32 bit unsigned integer
    @ingroup zwapi_util
    */
    typedef unsigned int vxUint32;


//====================================================================================================================
/** @name Entity Pick Path */
//====================================================================================================================
/** 
@brief  maximum length of a non-persistent (i.e. evaluated) pick path
@ingroup zwapi_util
*/
#define V_PP_LEN 400


    /**
    @brief entity pick path(sync with VsPickPath)
    @ingroup zwapi_util
    */
    typedef struct svxEntPath
    {
        int Count;        /**<@brief  number of id's in the path */
        int Id[V_PP_LEN]; /**<@brief  list of id's that define the path to an entity  
                       Id[0] = -1; path begins with top-level parent file/object (target path)  
                       Id[0] = -2; path begins with currently active root object (root path)   
                       Id[1] = id of first parent entity in path  
                       Id[N] = id of child entity to act upon  
                       See cvxEntPathToRoot() to convert target path to root path */
    } svxEntPath;

    //====================================================================================================================
    /** @name Point/Vector */
    //====================================================================================================================
    /**
    @brief 2D point
    @ingroup zwapi_util
    */
    typedef struct svxPoint2
    {
        double x;
        double y;
    } svxPoint2;

    /**
    @brief 2D point(single precision floating point)
    @ingroup zwapi_util
    */
    typedef struct svxPoint2f
    {
        float x;
        float y;
    } svxPoint2f;

    /**
    @brief 3D point
    @ingroup zwapi_util
    */
    typedef struct svxPoint
    {
        double x;
        double y;
        double z;
    } svxPoint;

    /**
    @brief 3D point (single precision floating point)
    @ingroup zwapi_util
    */
    typedef struct svxPointf
    {
        float x;
        float y;
        float z;
    } svxPointf;

    /**
    @brief 2D vector
    @ingroup zwapi_util
    */
    typedef struct svxVector2
    {
        double x;
        double y;
    } svxVector2;

    /**
    @brief 3D vector
    @ingroup zwapi_util
    */
    typedef struct svxVector
    {
        double x;
        double y;
        double z;
    } svxVector;

    /**
    @brief 3D axis
    @ingroup zwapi_util
    */
    typedef struct svxAxis
    {
        svxPoint Pnt;  /**<@brief  point */
        svxVector Dir; /**<@brief  direction */
    } svxAxis;

    /**
    @brief type of axis
    @ingroup zwapi_util
    */
    typedef enum evxAxisType
    {
        VX_AXIS_X = 1, /**<@brief  x axis */
        VX_AXIS_Y = 2, /**<@brief  y axis */
        VX_AXIS_Z = 3, /**<@brief  z axis */
    } evxAxisType;

    /**
    @brief 3D triangle
    @ingroup zwapi_util
    */
    typedef struct svxTriangle
    {
        svxPoint Pnt[3];  /**<@brief  triangle vertices */
        svxVector Normal; /**<@brief  outward-facing normal */
    } svxTriangle;

    //====================================================================================================================
    /** @name Unit */
    //====================================================================================================================
    /**
    @brief system of linear units
    @ingroup zwapi_util
    */
    typedef enum evxUnitType
    {
        VX_UNIT_MICRON     = 0, /**<@brief  micron */
        VX_UNIT_MILLIMETER = 1, /**<@brief  millimeter */
        VX_UNIT_CENTIMETER = 2, /**<@brief  centimeter */
        VX_UNIT_METER      = 3, /**<@brief  meter */
        VX_UNIT_INCH       = 4, /**<@brief  inch */
        VX_UNIT_FOOT       = 5, /**<@brief  foot */
        VX_UNIT_YD         = 6, /**<@brief  yard */
        VX_UNIT_DM         = 7, /**<@brief  decimeter */
        VX_UNIT_MIL        = 10 /**<@brief  mil */
    } evxUnitType;


    /**
    @brief system of feed rate unit
    @ingroup zwapi_util
    */
    typedef enum evxFdUnitType
    {
        VX_CM_FEED_NONE = 0, /**<@brief  feed unit invalid */
        VX_CM_FEED_MMPM = 1, /**<@brief  feed unit MM per minute */
        VX_CM_FEED_MMPR = 2  /**<@brief  feed unit MM per revolution */
    } evxFdUnitType;


    /**
    @brief system of feed rate struct
    @ingroup zwapi_util
    */
    typedef struct svxFeedRate
    {
        evxFdUnitType unitType; /**<@brief  feed unit type */
        double feedRate;        /**<@brief  feed value */
    } svxFeedRate;

    /**
    @brief system of mass units
    @ingroup zwapi_util
    */
    typedef enum evxMassUnitType
    {
        VX_UNIT_GM = 11, /**<@brief  gram */
        VX_UNIT_KG = 12, /**<@brief  kilogram */
        VX_UNIT_OZ = 13, /**<@brief  ounce */
        VX_UNIT_LB = 14  /**<@brief  pound */
    } evxMassUnitType;

    /**
    @brief system of density units
    @ingroup zwapi_util
    */
    typedef enum evxDensityUnitType
    {
        VX_UNIT_DEN_KG_M3  = 0,  /**<@brief  kg/m3 */
        VX_UNIT_DEN_KG_MM3 = 1,  /**<@brief  kg/mm3 */
        VX_UNIT_DEN_G_MM3  = 2,  /**<@brief  g/mm3 */
        VX_UNIT_DEN_G_CM3  = 3,  /**<@brief  g/cm3 */
        VX_UNIT_DEN_LB_IN3 = 4,  /**<@brief  lb/in3 */
        VX_UNIT_DEN_LB_FT3 = 5,  /**<@brief  lb/ft3 */
        VX_UNIT_DEN_LB_YD3 = 6,  /**<@brief  lb/yd3 */
        VX_UNIT_DEN_OZ_IN3 = 7,  /**<@brief  oz/in3 */
        VX_UNIT_DEN_OZ_FT3 = 8,  /**<@brief  oz/ft3 */
        VX_UNIT_DEN_OZ_YD3 = 9,  /**<@brief  oz/yd3 */
        VX_UNIT_DEN_KG_DM3 = 10, /**<@brief  kg/dm3 */
        VX_UNIT_DEN_G_DM3  = 11, /**<@brief  g/dm3 */
    } evxDensityUnitType;

    /**
    @brief system of mass moment units
    @ingroup zwapi_util
    */
    typedef enum evxMassMomentUnitType
    {
        VX_UNIT_MASSMOMENT_KGMM2 = 0,  /**<@brief  kg.mm2 */
        VX_UNIT_MASSMOMENT_KGM2  = 1,  /**<@brief  kg.m2 */
        VX_UNIT_MASSMOMENT_GMM2  = 2,  /**<@brief  g.mm2 */
        VX_UNIT_MASSMOMENT_GCM2  = 3,  /**<@brief  g.cm2 */
        VX_UNIT_MASSMOMENT_LBIN2 = 4,  /**<@brief  lb.in2 */
        VX_UNIT_MASSMOMENT_LBFT2 = 5,  /**<@brief  lb.ft2 */
        VX_UNIT_MASSMOMENT_LBYD2 = 6,  /**<@brief  lb.yd2 */
        VX_UNIT_MASSMOMENT_OZIN2 = 7,  /**<@brief  oz.in2 */
        VX_UNIT_MASSMOMENT_OZFT2 = 8,  /**<@brief  oz.ft2 */
        VX_UNIT_MASSMOMENT_OZYD2 = 9,  /**<@brief  oz.yd2 */
        VX_UNIT_MASSMOMENT_KGDM2 = 10, /**<@brief  kg.dm2 */
        VX_UNIT_MASSMOMENT_GDM2  = 11, /**<@brief  g.dm2 */
    } evxMassMomentUnitType;

    //====================================================================================================================
    /** @name Limits/3D Bounding Box */
    //====================================================================================================================
    /**
    @brief limits
    @ingroup zwapi_util
    */
    typedef struct svxLimit
    {
        double min; /**<@brief  maximum */
        double max; /**<@brief  minimum */
    } svxLimit;

    /**
    @brief 3D bounding box
    @ingroup zwapi_util
    */
    typedef struct svxBndBox
    {
        svxLimit X; /**<@brief  the maximum and minimum values in the x direction of the boundle box */
        svxLimit Y; /**<@brief  the maximum and minimum values in the y direction of the boundle box */
        svxLimit Z; /**<@brief  the maximum and minimum values in the z direction of the boundle box */
    } svxBndBox;

    /**
    @brief Rectangle data
    @ingroup zwapi_util
    */
    typedef struct svxRectangle
    {
        long left;   /**<@brief  left */
        long top;    /**<@brief  top */
        long right;  /**<@brief  right */
        long bottom; /**<@brief  bottom */
    } svxRectangle;

    //====================================================================================================================
    /** @name Matrix */
    //====================================================================================================================
    /**
    @brief 3D transformation matrix or coordinate frame (local to world)
    @ingroup zwapi_util
    */
    typedef struct svxMatrix
    {
        char identity;         /**<@brief  1 if identity matrix, else 0 */
        double xx, yx, zx, xt; /**<@brief  cosines of X axis and origin X (xt) */
        double xy, yy, zy, yt; /**<@brief  cosines of Y axis and origin Y (yt) */
        double xz, yz, zz, zt; /**<@brief  cosines of Z axis and origin Z (zt) */
    } svxMatrix;

    /**
    @brief Euler angles and translate vector
    @ingroup zwapi_util
    */
    typedef struct svxMatEuler
    {
        double ang1st; /**<@brief  1st rotate angle (Rad) */
        double ang2nd; /**<@brief  2nd rotate angle (Rad) */
        double ang3rd; /**<@brief  3rd rotate angle (Rad) */
        double x;      /**<@brief  x location */
        double y;      /**<@brief  y location */
        double z;      /**<@brief  z location */
    } svxMatEuler;

    /**
    @brief Two categories of rotation sequences for Euler angles: Proper Type and Tait-Byran Type
    @ingroup zwapi_util
    */
    typedef enum evxEulerAngSeq
    {
        /*
        ** Proper Euler Angle - when the first and third rotation are around the same axes.
        */
        VX_XYX = 121, /**<@brief  X-axis, Y-axis, X-axis */
        VX_XZX = 131, /**<@brief  X-axis, Z-axis, X-axis */
        VX_YXY = 212, /**<@brief  Y-axis, X-axis, Y-axis */
        VX_YZY = 232, /**<@brief  Y-axis, Z-axis, Y-axis */
        VX_ZXZ = 313, /**<@brief  Z-axis, X-axis, Z-axis */
        VX_ZYZ = 323, /**<@brief  Z-axis, Y-axis, Z-axis */
        /*
        ** Tait-Bryan or Roll-Pitch-Yaw Angles - when three rotations are around different axes.
        */
        VX_RPY = 123, /**<@brief  X-axis (Roll), Y-axis (Pitch), Z-axis (Yaw) */
        VX_RYP = 132, /**<@brief  X-axis (Roll), Z-axis (Yaw), Y-axis (Pitch) */
        VX_PRY = 213, /**<@brief  Y-axis (Pitch), X-axis (Roll), Z-axis (Yaw) */
        VX_PYR = 231, /**<@brief  Y-axis (Pitch), Z-axis (Yaw), X-axis (Roll) */
        VX_YRP = 312, /**<@brief  Z-axis (Yaw), X-axis (Roll), Y-axis (Pitch) */
        VX_YPR = 321  /**<@brief  Z-axis (Yaw), Y-axis (Pitch), X-axis (Roll) */
    } evxEulerAngSeq;

    //====================================================================================================================
    /** @name Point On Entity */
    //====================================================================================================================
    /**
    @brief type of sketch geometry critical point
    @ingroup zwapi_util
    */
    typedef enum evxGeomCritPnt
    {
        VX_NO_POINT,              /**<@brief  set the entity not the critical point of entity */
        VX_FREE_POINT = 0,        /**<@brief  free point, non-critical point */
        VX_START_POINT,           /**<@brief  start point of curve or line (if the input is face, get point of (u.min, v.min)) */
        VX_END_POINT,             /**<@brief  end point of curve or line (if the input is face, get point of (u.max, v.max))*/
        VX_CENTER_POINT,          /**<@brief  center point, used only for arc or circle (if the input is face, get point of ((u.min+u.max)/2, (v.min+v.max)/2))*/
        VX_SPLINE_DEFINING_POINT, /**<@brief  control point, used only for splines */
        VX_MIDDLE_POINT,          /**<@brief  middle point of curve or line */
        VX_ORIGIN_POINT           /**<@brief  origin of datum plane and datum CSYS */
    } evxGeomCritPnt;

    /**
    @brief point on entity definition, also can use to set a dynamic point
    @ingroup zwapi_util
    */
    typedef struct svxPntOnEnt
    {
        int idEnt;              /**<@brief  entity id that the point on (-1/0 to ignore) */
        int idParent;           /**<@brief  entity parent id (-1/0 to ignore, profile/view id if idEnt is 2d entity) */
        int useCritPnt;         /**<@brief  1- use critTyp, else 0 (idEnt must be valid if useCritPnt is 1)*/
        evxGeomCritPnt critTyp; /**<@brief  type of critical point */
        int idControlPnt;       /**<@brief  id of the control point of the spline (starting from 0), only used when critPnt is VX_SPLINE_DEFINING_POINT */
        svxPoint pnt;           /**<@brief  input point(useCritPnt = 1 to ignore)*/
        svxVector dir;          /**<@brief  direction of the input point */
        int useDir;             /**<@brief  1-use as a direction, else 0 */
        int flipDir;            /**<@brief  1-flip direction, else 0. enable when the direction control support flip the direction */
    } svxPntOnEnt;

    /**
    @brief point on entity path definition, also can use to set a dynamic point
    @ingroup zwapi_util
    */
    typedef struct svxPntOnEntPath
    {
        evxGeomCritPnt pntType; /**<@brief  point type */
        int idControlPnt;       /**<@brief  id of the control point of the spline (starting from 0), only used when pntType is VX_SPLINE_DEFINING_POINT */
        svxEntPath entPath;     /**<@brief  entity path that the point on */
        svxPoint pnt;           /**<@brief  point coordinates, only used when pntType is VX_FREE_POINT */
    } svxPntOnEntPath;

    /**
    @brief type of direction
    @ingroup zwapi_util
    */
    typedef enum evxDirType
    {
        VX_START_DIR, /*!<@brief  start direction of curve, (if the input is face, get tangent direction of (u.min, v.min)) */
        VX_END_DIR,   /*!<@brief  end direction of curve, (if the input is face, get tangent direction of (u.max, v.max)) */
        VX_PNT_DIR,   /*!<@brief  tangent direction of point on face */
    } evxDirType;

    /**
    @brief direction of point on entity path definition, also can use to set a dynamic direction
    @ingroup zwapi_util
    */
    typedef struct svxDirOnEntPath
    {
        svxEntPath entPath; /*!<@brief  entity path that defines the direction */
        evxDirType dirType; /*!<@brief  direction type, only used when entPath is a curve and not a circle or face */
        svxPoint pnt;       /*!<@brief  point coordinates, only used when entPath is a face and dirType is VX_PNT_DIR */
        svxVector dir;      /*!<@brief  direction, only used when entPath is a invalid path (svxEntPath.Count < 2) */
        int flipDir;        /*!<@brief  whether to flip direction (1 to flip, else 0). enable when the direction control support flip the direction */
    } svxDirOnEntPath;

    /**
    @brief point location
    @ingroup zwapi_util
    */
    typedef enum evxPntLocation
    {
        VX_PNT_OUT  = -1, /**<@brief  point lies outside the boundary */
        VX_PNT_ON   = 0,  /**<@brief  point lies on the boundary */
        VX_PNT_IN   = 1,  /**<@brief  point lies inside the boundary */
        VX_PNT_NULL = -2  /**<@brief  unable to classify point location */
    } evxPntLocation;

    //====================================================================================================================
    /** @name Color */
    //====================================================================================================================
    /**
    @brief RGB color (each component defined over 0 to 255)
    @ingroup zwapi_util
    */
    typedef struct svxColor
    {
        unsigned char r; /**<@brief  red color component (0-255) */
        unsigned char g; /**<@brief  green color component (0-255) */
        unsigned char b; /**<@brief  blue color component (0-255) */
    } svxColor;

    /**
    @brief RGB color (floating point components defined over 0.0 to 1.0)
    @ingroup zwapi_util
    */
    typedef struct svxColorf
    {
        float r; /**<@brief  red color component (0.0-1.0) */
        float g; /**<@brief  green color component (0.0-1.0) */
        float b; /**<@brief  blue color component (0.0-1.0) */
    } svxColorf;


    /**
    @brief standard colors + index colors (see cvxColorRGB() for RGB color components)
    @ingroup zwapi_util
    */
    typedef enum evxColor
    {
        VX_COLOR_RGB           = -1,
        VX_COLOR_NULL          = 0,
        VX_COLOR_GREEN         = 1,  /**<@brief  R=0,   G=255, B=0 */
        VX_COLOR_RED           = 2,  /**<@brief  R=255, G=0,   B=0 */
        VX_COLOR_BROWN         = 3,  /**<@brief  R=160, G=96,  B=0 */
        VX_COLOR_GOLDENROD     = 4,  /**<@brief  R=255, G=188, B=0 */
        VX_COLOR_MED_BLUE      = 5,  /**<@brief  R=0,   G=255, B=255 */
        VX_COLOR_DARK_MAGENTA  = 6,  /**<@brief  R=255, G=0,   B=255 */
        VX_COLOR_DARK_GREY     = 7,  /**<@brief  R=96,  G=96,  B=96 */
        VX_COLOR_DARK_BLUE     = 8,  /**<@brief  R=0,   G=0,   B=255 */
        VX_COLOR_VIOLET        = 9,  /**<@brief  R=140, G=140, B=235 */
        VX_COLOR_LIGHT_GREEN   = 10, /**<@brief  R=160, G=255, B=160 */
        VX_COLOR_LIGHT_BLUE    = 11, /**<@brief  R=160, G=255, B=255 */
        VX_COLOR_ROSE          = 12, /**<@brief  R=255, G=160, B=160 */
        VX_COLOR_LIGHT_MAGENTA = 13, /**<@brief  R=255, G=160, B=255 */
        VX_COLOR_LIGHT_GREY    = 14, /**<@brief  R=160, G=160, B=160 */
        VX_COLOR_WHITE         = 15, /**<@brief  R=255, G=255, B=255 */
        VX_COLOR_BLACK         = 16, /**<@brief  R=0,   G=0,   B=0 */
        VX_COLOR_YELLOW        = 17, /**<@brief  R=255, G=255, B=0 */
        VX_COLOR_MED_GREY      = 18, /**<@brief  R=135, G=160, B=130 */
        VX_COLOR_PURPLE        = 19, /**<@brief  R=102, G=0,   B=153 */
        VX_COLOR_STANDARD_LAST = VX_COLOR_PURPLE,

        VX_COLOR_INDEX_BEGIN,
        VX_COLOR_INDEX20 = VX_COLOR_INDEX_BEGIN, /**<@brief  R=255, G=63,  B=0   */
        VX_COLOR_INDEX21,                        /**<@brief  R=255, G=127, B=127, index color 11 */
        VX_COLOR_INDEX22,                        /**<@brief  R=204, G=51,  B=0   */
        VX_COLOR_INDEX23,                        /**<@brief  R=204, G=127, B=102 */
        VX_COLOR_INDEX24,                        /**<@brief  R=153, G=38,  B=0   */
        VX_COLOR_INDEX25,                        /**<@brief  R=153, G=95,  B=76  */
        VX_COLOR_INDEX26,                        /**<@brief  R=127, G=31,  B=0   */
        VX_COLOR_INDEX27,                        /**<@brief  R=127, G=79,  B=63  */
        VX_COLOR_INDEX28,                        /**<@brief  R=76,  G=19,  B=0   */
        VX_COLOR_INDEX29,                        /**<@brief  R=76,  G=47,  B=38  */
        VX_COLOR_INDEX30,                        /**<@brief  R=255, G=127, B=0   */
        VX_COLOR_INDEX31,                        /**<@brief  R=255, G=191, B=127 */
        VX_COLOR_INDEX32,                        /**<@brief  R=204, G=102, B=0   */
        VX_COLOR_INDEX33,                        /**<@brief  R=204, G=153, B=102 */
        VX_COLOR_INDEX34,                        /**<@brief  R=153, G=76,  B=0   */
        VX_COLOR_INDEX35,                        /**<@brief  R=153, G=114, B=76  */
        VX_COLOR_INDEX36,                        /**<@brief  R=127, G=63,  B=0   */
        VX_COLOR_INDEX37,                        /**<@brief  R=127, G=95,  B=63  */
        VX_COLOR_INDEX38,                        /**<@brief  R=76,  G=38,  B=0   */
        VX_COLOR_INDEX39,                        /**<@brief  R=76,  G=57,  B=38  */
        VX_COLOR_INDEX40,                        /**<@brief  R=204, G=0,   B=0,   index color 12   */
        VX_COLOR_INDEX41,                        /**<@brief  R=255, G=223, B=127 */
        VX_COLOR_INDEX42,                        /**<@brief  R=204, G=153, B=0   */
        VX_COLOR_INDEX43,                        /**<@brief  R=204, G=178, B=102 */
        VX_COLOR_INDEX44,                        /**<@brief  R=204, G=102, B=102,  index color 13 */
        VX_COLOR_INDEX45,                        /**<@brief  R=153, G=133, B=76  */
        VX_COLOR_INDEX46,                        /**<@brief  R=127, G=95,  B=0   */
        VX_COLOR_INDEX47,                        /**<@brief  R=127, G=111, B=63  */
        VX_COLOR_INDEX48,                        /**<@brief  R=76,  G=57,  B=0   */
        VX_COLOR_INDEX49,                        /**<@brief  R=76,  G=66,  B=38  */
        VX_COLOR_INDEX50,                        /**<@brief  R=153, G=0,   B=0,   index color 14   */
        VX_COLOR_INDEX51,                        /**<@brief  R=255, G=255, B=127 */
        VX_COLOR_INDEX52,                        /**<@brief  R=204, G=204, B=0   */
        VX_COLOR_INDEX53,                        /**<@brief  R=204, G=204, B=102 */
        VX_COLOR_INDEX54,                        /**<@brief  R=153, G=153, B=0   */
        VX_COLOR_INDEX55,                        /**<@brief  R=153, G=153, B=76  */
        VX_COLOR_INDEX56,                        /**<@brief  R=127, G=127, B=0   */
        VX_COLOR_INDEX57,                        /**<@brief  R=127, G=127, B=63  */
        VX_COLOR_INDEX58,                        /**<@brief  R=76,  G=76,  B=0   */
        VX_COLOR_INDEX59,                        /**<@brief  R=76,  G=76,  B=38  */
        VX_COLOR_INDEX60,                        /**<@brief  R=191, G=255, B=0   */
        VX_COLOR_INDEX61,                        /**<@brief  R=223, G=255, B=127 */
        VX_COLOR_INDEX62,                        /**<@brief  R=153, G=204, B=0   */
        VX_COLOR_INDEX63,                        /**<@brief  R=178, G=204, B=102 */
        VX_COLOR_INDEX64,                        /**<@brief  R=114, G=153, B=0   */
        VX_COLOR_INDEX65,                        /**<@brief  R=133, G=153, B=76  */
        VX_COLOR_INDEX66,                        /**<@brief  R=95,  G=127, B=0   */
        VX_COLOR_INDEX67,                        /**<@brief  R=111, G=127, B=63  */
        VX_COLOR_INDEX68,                        /**<@brief  R=57,  G=76,  B=0   */
        VX_COLOR_INDEX69,                        /**<@brief  R=66,  G=76,  B=38  */
        VX_COLOR_INDEX70,                        /**<@brief  R=127, G=255, B=0   */
        VX_COLOR_INDEX71,                        /**<@brief  R=191, G=255, B=127 */
        VX_COLOR_INDEX72,                        /**<@brief  R=102, G=204, B=0   */
        VX_COLOR_INDEX73,                        /**<@brief  R=153, G=204, B=102 */
        VX_COLOR_INDEX74,                        /**<@brief  R=76,  G=153, B=0   */
        VX_COLOR_INDEX75,                        /**<@brief  R=114, G=153, B=76  */
        VX_COLOR_INDEX76,                        /**<@brief  R=63,  G=127, B=0   */
        VX_COLOR_INDEX77,                        /**<@brief  R=95,  G=127, B=63  */
        VX_COLOR_INDEX78,                        /**<@brief  R=38,  G=76,  B=0   */
        VX_COLOR_INDEX79,                        /**<@brief  R=57,  G=76,  B=38  */
        VX_COLOR_INDEX80,                        /**<@brief  R=63,  G=255, B=0   */
        VX_COLOR_INDEX81,                        /**<@brief  R=153, G=76,  B=76,  index color 15  */
        VX_COLOR_INDEX82,                        /**<@brief  R=51,  G=204, B=0   */
        VX_COLOR_INDEX83,                        /**<@brief  R=127, G=204, B=102 */
        VX_COLOR_INDEX84,                        /**<@brief  R=38,  G=153, B=0   */
        VX_COLOR_INDEX85,                        /**<@brief  R=95,  G=153, B=76  */
        VX_COLOR_INDEX86,                        /**<@brief  R=31,  G=127, B=0   */
        VX_COLOR_INDEX87,                        /**<@brief  R=79,  G=127, B=63  */
        VX_COLOR_INDEX88,                        /**<@brief  R=19,  G=76,  B=0   */
        VX_COLOR_INDEX89,                        /**<@brief  R=47,  G=76,  B=28  */
        VX_COLOR_INDEX90,                        /**<@brief  R=127, G=0,   B=0,   index color 16   */
        VX_COLOR_INDEX91,                        /**<@brief  R=127, G=255, B=127 */
        VX_COLOR_INDEX92,                        /**<@brief  R=0,   G=204, B=0   */
        VX_COLOR_INDEX93,                        /**<@brief  R=102, G=204, B=102 */
        VX_COLOR_INDEX94,                        /**<@brief  R=0,   G=153, B=0   */
        VX_COLOR_INDEX95,                        /**<@brief  R=76,  G=153, B=76  */
        VX_COLOR_INDEX96,                        /**<@brief  R=0,   G=127, B=0   */
        VX_COLOR_INDEX97,                        /**<@brief  R=63,  G=127, B=63  */
        VX_COLOR_INDEX98,                        /**<@brief  R=0,   G=76,  B=0   */
        VX_COLOR_INDEX99,                        /**<@brief  R=38,  G=76,  B=38  */
        VX_COLOR_INDEX100,                       /**<@brief  R=0,   G=255, B=63  */
        VX_COLOR_INDEX101,                       /**<@brief  R=127, G=255, B=159 */
        VX_COLOR_INDEX102,                       /**<@brief  R=0,   G=204, B=51  */
        VX_COLOR_INDEX103,                       /**<@brief  R=102, G=204, B=127 */
        VX_COLOR_INDEX104,                       /**<@brief  R=0,   G=153, B=38  */
        VX_COLOR_INDEX105,                       /**<@brief  R=76,  G=153, B=95  */
        VX_COLOR_INDEX106,                       /**<@brief  R=0,   G=127, B=31  */
        VX_COLOR_INDEX107,                       /**<@brief  R=63,  G=127, B=79  */
        VX_COLOR_INDEX108,                       /**<@brief  R=0,   G=76,  B=19  */
        VX_COLOR_INDEX109,                       /**<@brief  R=38,  G=76,  B=47  */
        VX_COLOR_INDEX110,                       /**<@brief  R=0,   G=255, B=127 */
        VX_COLOR_INDEX111,                       /**<@brief  R=127, G=255, B=191 */
        VX_COLOR_INDEX112,                       /**<@brief  R=0,   G=204, B=102 */
        VX_COLOR_INDEX113,                       /**<@brief  R=102, G=204, B=153 */
        VX_COLOR_INDEX114,                       /**<@brief  R=0,   G=153, B=76  */
        VX_COLOR_INDEX115,                       /**<@brief  R=76,  G=153, B=114 */
        VX_COLOR_INDEX116,                       /**<@brief  R=0,   G=127, B=63  */
        VX_COLOR_INDEX117,                       /**<@brief  R=63,  G=127, B=95  */
        VX_COLOR_INDEX118,                       /**<@brief  R=0,   G=76,  B=38  */
        VX_COLOR_INDEX119,                       /**<@brief  R=38,  G=76,  B=57  */
        VX_COLOR_INDEX120,                       /**<@brief  R=0,   G=255, B=191 */
        VX_COLOR_INDEX121,                       /**<@brief  R=127, G=255, B=223 */
        VX_COLOR_INDEX122,                       /**<@brief  R=0,   G=204, B=153 */
        VX_COLOR_INDEX123,                       /**<@brief  R=102, G=204, B=178 */
        VX_COLOR_INDEX124,                       /**<@brief  R=0,   G=153, B=114 */
        VX_COLOR_INDEX125,                       /**<@brief  R=76,  G=153, B=133 */
        VX_COLOR_INDEX126,                       /**<@brief  R=0,   G=127, B=95  */
        VX_COLOR_INDEX127,                       /**<@brief  R=63,  G=127, B=111 */
        VX_COLOR_INDEX128,                       /**<@brief  R=0,   G=76,  B=57  */
        VX_COLOR_INDEX129,                       /**<@brief  R=38,  G=76,  B=66  */
        VX_COLOR_INDEX130,                       /**<@brief  R=127, G=63,  B=63,  index color 17  */
        VX_COLOR_INDEX131,                       /**<@brief  R=76,  G=38,  B=38,  index color 19  */
        VX_COLOR_INDEX132,                       /**<@brief  R=0,   G=204, B=204 */
        VX_COLOR_INDEX133,                       /**<@brief  R=102, G=204, B=204 */
        VX_COLOR_INDEX134,                       /**<@brief  R=0,   G=153, B=153 */
        VX_COLOR_INDEX135,                       /**<@brief  R=76,  G=153, B=153 */
        VX_COLOR_INDEX136,                       /**<@brief  R=0,   G=127, B=127 */
        VX_COLOR_INDEX137,                       /**<@brief  R=63,  G=127, B=127 */
        VX_COLOR_INDEX138,                       /**<@brief  R=0,   G=76,  B=76  */
        VX_COLOR_INDEX139,                       /**<@brief  R=38,  G=76,  B=76  */
        VX_COLOR_INDEX140,                       /**<@brief  R=0,   G=191, B=255 */
        VX_COLOR_INDEX141,                       /**<@brief  R=127, G=223, B=255 */
        VX_COLOR_INDEX142,                       /**<@brief  R=0,   G=153, B=204 */
        VX_COLOR_INDEX143,                       /**<@brief  R=102, G=178, B=204 */
        VX_COLOR_INDEX144,                       /**<@brief  R=0,   G=114, B=153 */
        VX_COLOR_INDEX145,                       /**<@brief  R=76,  G=133, B=153 */
        VX_COLOR_INDEX146,                       /**<@brief  R=0,   G=95,  B=127 */
        VX_COLOR_INDEX147,                       /**<@brief  R=63,  G=111, B=127 */
        VX_COLOR_INDEX148,                       /**<@brief  R=0,   G=57,  B=76  */
        VX_COLOR_INDEX149,                       /**<@brief  R=38,  G=66,  B=76  */
        VX_COLOR_INDEX150,                       /**<@brief  R=0,   G=127, B=255 */
        VX_COLOR_INDEX151,                       /**<@brief  R=127, G=191, B=255 */
        VX_COLOR_INDEX152,                       /**<@brief  R=0,   G=102, B=204 */
        VX_COLOR_INDEX153,                       /**<@brief  R=102, G=153, B=204 */
        VX_COLOR_INDEX154,                       /**<@brief  R=0,   G=76,  B=153 */
        VX_COLOR_INDEX155,                       /**<@brief  R=76,  G=114, B=153 */
        VX_COLOR_INDEX156,                       /**<@brief  R=0,   G=63,  B=127 */
        VX_COLOR_INDEX157,                       /**<@brief  R=63,  G=95,  B=127 */
        VX_COLOR_INDEX158,                       /**<@brief  R=0,   G=38,  B=76  */
        VX_COLOR_INDEX159,                       /**<@brief  R=38,  G=57,  B=76  */
        VX_COLOR_INDEX160,                       /**<@brief  R=0,   G=63,  B=255 */
        VX_COLOR_INDEX161,                       /**<@brief  R=127, G=159, B=255 */
        VX_COLOR_INDEX162,                       /**<@brief  R=0,   G=51,  B=204 */
        VX_COLOR_INDEX163,                       /**<@brief  R=102, G=127, B=204 */
        VX_COLOR_INDEX164,                       /**<@brief  R=0,   G=38,  B=153 */
        VX_COLOR_INDEX165,                       /**<@brief  R=76,  G=95,  B=153 */
        VX_COLOR_INDEX166,                       /**<@brief  R=0,   G=31,  B=127 */
        VX_COLOR_INDEX167,                       /**<@brief  R=63,  G=79,  B=127 */
        VX_COLOR_INDEX168,                       /**<@brief  R=0,   G=19,  B=76  */
        VX_COLOR_INDEX169,                       /**<@brief  R=38,  G=47,  B=76  */
        VX_COLOR_INDEX170,                       /**<@brief  R=255, G=127, B=159, index color 241 */
        VX_COLOR_INDEX171,                       /**<@brief  R=204, G=0,   B=51,  index color 242  */
        VX_COLOR_INDEX172,                       /**<@brief  R=0,   G=0,   B=204 */
        VX_COLOR_INDEX173,                       /**<@brief  R=102, G=102, B=204 */
        VX_COLOR_INDEX174,                       /**<@brief  R=0,   G=0,   B=153 */
        VX_COLOR_INDEX175,                       /**<@brief  R=76,  G=76,  B=153 */
        VX_COLOR_INDEX176,                       /**<@brief  R=0,   G=0,   B=127 */
        VX_COLOR_INDEX177,                       /**<@brief  R=63,  G=63,  B=127 */
        VX_COLOR_INDEX178,                       /**<@brief  R=0,   G=0,   B=76  */
        VX_COLOR_INDEX179,                       /**<@brief  R=38,  G=38,  B=76  */
        VX_COLOR_INDEX180,                       /**<@brief  R=63,  G=0,   B=255 */
        VX_COLOR_INDEX181,                       /**<@brief  R=159, G=127, B=255 */
        VX_COLOR_INDEX182,                       /**<@brief  R=51,  G=0,   B=204 */
        VX_COLOR_INDEX183,                       /**<@brief  R=127, G=102, B=204 */
        VX_COLOR_INDEX184,                       /**<@brief  R=38,  G=0,   B=153 */
        VX_COLOR_INDEX185,                       /**<@brief  R=95,  G=76,  B=153 */
        VX_COLOR_INDEX186,                       /**<@brief  R=31,  G=0,   B=127 */
        VX_COLOR_INDEX187,                       /**<@brief  R=79,  G=63,  B=127 */
        VX_COLOR_INDEX188,                       /**<@brief  R=19,  G=0,   B=76  */
        VX_COLOR_INDEX189,                       /**<@brief  R=47,  G=38,  B=76  */
        VX_COLOR_INDEX190,                       /**<@brief  R=127, G=0,   B=255 */
        VX_COLOR_INDEX191,                       /**<@brief  R=191, G=127, B=255 */
        VX_COLOR_INDEX192,                       /**<@brief  R=102, G=0,   B=204 */
        VX_COLOR_INDEX193,                       /**<@brief  R=153, G=102, B=204 */
        VX_COLOR_INDEX194,                       /**<@brief  R=76,  G=0,   B=153 */
        VX_COLOR_INDEX195,                       /**<@brief  R=114, G=76,  B=153 */
        VX_COLOR_INDEX196,                       /**<@brief  R=63,  G=0,   B=127 */
        VX_COLOR_INDEX197,                       /**<@brief  R=95,  G=63,  B=127 */
        VX_COLOR_INDEX198,                       /**<@brief  R=38,  G=0,   B=76  */
        VX_COLOR_INDEX199,                       /**<@brief  R=57,  G=38,  B=76  */
        VX_COLOR_INDEX200,                       /**<@brief  R=191, G=0,   B=255 */
        VX_COLOR_INDEX201,                       /**<@brief  R=223, G=127, B=255 */
        VX_COLOR_INDEX202,                       /**<@brief  R=153, G=0,   B=204 */
        VX_COLOR_INDEX203,                       /**<@brief  R=178, G=102, B=204 */
        VX_COLOR_INDEX204,                       /**<@brief  R=114, G=0,   B=153 */
        VX_COLOR_INDEX205,                       /**<@brief  R=133, G=76,  B=153 */
        VX_COLOR_INDEX206,                       /**<@brief  R=95,  G=0,   B=127 */
        VX_COLOR_INDEX207,                       /**<@brief  R=204, G=102, B=127, index color 243 */
        VX_COLOR_INDEX208,                       /**<@brief  R=57,  G=0,   B=76  */
        VX_COLOR_INDEX209,                       /**<@brief  R=66,  G=38,  B=76  */
        VX_COLOR_INDEX210,                       /**<@brief  R=153, G=0,   B=38, index color 244  */
        VX_COLOR_INDEX211,                       /**<@brief  R=153, G=76,  B=95, index color 245  */
        VX_COLOR_INDEX212,                       /**<@brief  R=204, G=0,   B=204 */
        VX_COLOR_INDEX213,                       /**<@brief  R=204, G=102, B=204 */
        VX_COLOR_INDEX214,                       /**<@brief  R=153, G=0,   B=153 */
        VX_COLOR_INDEX215,                       /**<@brief  R=153, G=76,  B=153 */
        VX_COLOR_INDEX216,                       /**<@brief  R=127, G=0,   B=127 */
        VX_COLOR_INDEX217,                       /**<@brief  R=127, G=63,  B=127 */
        VX_COLOR_INDEX218,                       /**<@brief  R=76,  G=0,   B=76  */
        VX_COLOR_INDEX219,                       /**<@brief  R=76,  G=38,  B=76  */
        VX_COLOR_INDEX220,                       /**<@brief  R=255, G=0,   B=191 */
        VX_COLOR_INDEX221,                       /**<@brief  R=255, G=127, B=223 */
        VX_COLOR_INDEX222,                       /**<@brief  R=204, G=0,   B=153 */
        VX_COLOR_INDEX223,                       /**<@brief  R=204, G=102, B=178 */
        VX_COLOR_INDEX224,                       /**<@brief  R=153, G=0,   B=114 */
        VX_COLOR_INDEX225,                       /**<@brief  R=153, G=76,  B=133 */
        VX_COLOR_INDEX226,                       /**<@brief  R=127, G=0,   B=95  */
        VX_COLOR_INDEX227,                       /**<@brief  R=127, G=63,  B=111 */
        VX_COLOR_INDEX228,                       /**<@brief  R=76,  G=0,   B=57  */
        VX_COLOR_INDEX229,                       /**<@brief  R=76,  G=38,  B=66  */
        VX_COLOR_INDEX230,                       /**<@brief  R=255, G=0,   B=127 */
        VX_COLOR_INDEX231,                       /**<@brief  R=255, G=127, B=191 */
        VX_COLOR_INDEX232,                       /**<@brief  R=204, G=0,   B=102 */
        VX_COLOR_INDEX233,                       /**<@brief  R=204, G=102, B=153 */
        VX_COLOR_INDEX234,                       /**<@brief  R=153, G=0,   B=76  */
        VX_COLOR_INDEX235,                       /**<@brief  R=153, G=76,  B=114 */
        VX_COLOR_INDEX236,                       /**<@brief  R=127, G=0,   B=63  */
        VX_COLOR_INDEX237,                       /**<@brief  R=127, G=63,  B=95  */
        VX_COLOR_INDEX238,                       /**<@brief  R=76,  G=0,   B=38  */
        VX_COLOR_INDEX239,                       /**<@brief  R=76,  G=38,  B=57  */
        VX_COLOR_INDEX240,                       /**<@brief  R=255, G=0,   B=63  */
        VX_COLOR_INDEX241,                       /**<@brief  R=127, G=0,   B=31,  index color 246  */
        VX_COLOR_INDEX242,                       /**<@brief  R=127, G=63,  B=79, index color 247  */
        VX_COLOR_INDEX243,                       /**<@brief  R=76,  G=0,   B=19,  index color 248  */
        VX_COLOR_INDEX244,                       /**<@brief  R=76,  G=38,  B=47,  index color 249  */
        VX_COLOR_INDEX_LAST = VX_COLOR_INDEX244,
        VX_COLOR_LAST
    } evxColor;

    /*
    color is stored as a uchar - can't use negative numbers, so use 255 & 254 & 253;
    254 is necessary for the detail view
    */
    /**
    @brief color is stored as a uchar - can't use negative numbers, so use 255 & 254 & 253;
           254 is necessary for the detail view
    @ingroup zwapi_util
    */
    typedef enum evxColorAppFlag
    {
        VX_COLOR_BYLAYER = 253, /**<@brief color by layer. */
    } evxColorAppFlag;

    //====================================================================================================================
    /** @name Entity */
    //====================================================================================================================
    /**
    @brief entity types
    @ingroup zwapi_util
    */
    typedef enum evxEntType
    {
        VX_ENT_BREP       = -4,  /**<@brief  any brep entity (i.e. shape,face,loop,edge,vertex) */
        VX_ENT_OP         = -3,  /**<@brief  any history operation */
        VX_ENT_POINT      = -2,  /**<@brief  any point entity (2D or 3D) */
        VX_ENT_WIRE       = -1,  /**<@brief  any wireframe entity (line, arc, curve) */
        VX_ENT_ALL        = 0,   /**<@brief  any entity type */
        VX_ENT_SHAPE      = 42,  /**<@brief  b-rep shape (i.e. faceset) */
        VX_ENT_FACE       = 43,  /**<@brief  b-rep face */
        VX_ENT_EDGE       = 46,  /**<@brief  b-rep edge */
        VX_ENT_FTR        = 48,  /**<@brief  feature operation */
        VX_ENT_NRB_CRV    = 54,  /**<@brief  NURBS curve */
        VX_ENT_LINE3      = 56,  /**<@brief  3D line */
        VX_ENT_LINE2      = 58,  /**<@brief  2D line */
        VX_ENT_CIRCLE3    = 60,  /**<@brief  3D circle */
        VX_ENT_CIRCLE2    = 61,  /**<@brief  2D circle */
        VX_ENT_ARC3       = 62,  /**<@brief  3D arc */
        VX_ENT_ARC2       = 63,  /**<@brief  2D arc */
        VX_ENT_POINT3     = 64,  /**<@brief  3D point */
        VX_ENT_POINT2     = 65,  /**<@brief  2D point */
        VX_ENT_LAYER      = 67,  /**<@brief  layer */
        VX_ENT_SKETCH     = 70,  /**<@brief  sketch */
        VX_ENT_REF_GEOM   = 72,  /**<@brief  reference geometry */
        VX_ENT_TEXT       = 76,  /**<@brief  text */
        VX_ENT_DIMEN      = 77,  /**<@brief  dimension */
        VX_ENT_ANNO       = 83,  /**<@brief  annotation text */
        VX_ENT_BLOCK      = 86,  /**<@brief  block */
        VX_ENT_DWG_VIEW   = 87,  /**<@brief  drawing view */
        VX_ENT_COMP       = 88,  /**<@brief  assembly component */
        VX_ENT_PART       = 89,  /**<@brief  part */
        VX_ENT_SHEET      = 90,  /**<@brief  drawing sheet */
        VX_ENT_PACKET     = 91,  /**<@brief  drawing packet */
        VX_ENT_DATUM      = 95,  /**<@brief  datum plane */
        VX_ENT_CRV_LIST   = 102, /**<@brief  curve list */
        VX_ENT_PART_LINE  = 106, /**<@brief  parting line */
        VX_ENT_HATCH      = 111, /**<@brief  cross-hatch */
        VX_ENT_LIGHT      = 118, /**<@brief  light source */
        VX_ENT_INT_CRV    = 119, /**<@brief  interpolated curve */
        VX_ENT_VAR        = 120, /**<@brief  variable */
        VX_ENT_EQN_SET    = 121, /**<@brief  equation set */
        VX_ENT_SYMBOL     = 123, /**<@brief  2D symbol */
        VX_ENT_TRACE      = 133, /**<@brief  sketch trace */
        VX_ENT_TABLE      = 144, /**<@brief  table object */
        VX_ENT_VBREAKLINE = 182, /**<@brief  Break line */
        VX_ENT_RDTXT      = 185, /**<@brief  Ready sketch text */
        VX_ENT_BALLOON    = 168, /**<@brief  Text balloon */
        VX_ENT_DRAWING    = 169, /**<@brief  Drawing under the sheet*/
        VX_ENT_PMIENT     = 190, /**<@brief  PMI entity */
        VX_ENT_BLOCK2D    = 197, /**<@brief  2D sketch block */
        VX_ENT_BLKREF     = 198, /**<@brief  block reference (the instance of 2d sketch block) */
        VX_ENT_AXIS       = 311, /**<@brief  Datum axis */
        VX_ENT_CSYS       = 312, /**<@brief  Datum frame */
        VX_ENT_AXIS_2D    = 313, /**<@brief  2D datum axis*/
    } evxEntType;

    /**
    @brief entity pick (includes optional parent entity)
    @ingroup zwapi_util
    */
    typedef struct svxEntPick
    {
        int idEntity; /**<@brief  entity id */
        int idParent; /**<@brief  id of entity's parent object (i.e. sketch) or "0" if the
                     entity is a direct child of the target object (i.e. part) */
    } svxEntPick;

    /**
    @brief entity unique identifier
    @ingroup zwapi_util
    */
    typedef struct svxUid
    {
        int Time;  /**<@brief  base time */
        int Rand;  /**<@brief  random number */
        int Count; /**<@brief  entity count */
    } svxUid;

    /**
    @brief type of edge
    @ingroup zwapi_brep_data
    */
    typedef enum evxEdgeType
    {
        VX_EDGE_UNKNOWN  = -1, /**<@brief unknown */
        VX_EDGE_STANDARD = 0,  /**<@brief standard edge */
        VX_EDGE_SEAM     = 1,  /**<@brief seam edge */
        VX_EDGE_DEGEN    = 2   /**<@brief degenerate edge */
    } evxEdgeType;

    /**
    @brief entity search types
    @ingroup zwapi_util
    */
    typedef enum evxEntFind
    {
        VX_FIND_POINT              = 1,  /**<@brief  point */
        VX_FIND_CURVE              = 2,  /**<@brief  curve */
        VX_FIND_EDGE               = 3,  /**<@brief  edge */
        VX_FIND_WIRE               = 4,  /**<@brief  point, edge or curve */
        VX_FIND_FACE               = 5,  /**<@brief  face */
        VX_FIND_SKETCH             = 6,  /**<@brief  sketch */
        VX_FIND_CRV_LIST           = 7,  /**<@brief  3D curve list */
        VX_FIND_SKETCH_OR_CRV_LIST = 8,  /**<@brief  sketch or curve list */
        VX_FIND_PROFILE            = 9,  /**<@brief  curve, edge, sketch or curvelist */
        VX_FIND_EDGE_OR_CRV        = 10, /**<@brief  edge or curve */
        VX_FIND_3D_BLOCK           = 14, /**<@brief  3D point or STL block */
        VX_FIND_DIM                = 15  /**<@brief  dimension */
    } evxEntFind;

    /**
    @brief entity search data
    @ingroup zwapi_util
    */
    typedef struct svxEntFind
    {
        /*  input - basic parameters */
        evxEntFind Option; /**<@brief  type of entity to search for */
        svxPoint RefPnt;   /**<@brief  find entity closest to this reference point */

        /*  input - filter parameters */
        evxColor Color;       /**<@brief  entity color (0 to ignore, VX_COLOR_RGB to use RGB parameters) */
        svxColor Rgb;         /**<@brief  RGB color if "Color = VX_COLOR_RGB" */
        int CheckLayer;       /**<@brief  1 to check layer number (0 to ignore) */
        int Layer;            /**<@brief  entity layer number (0 to 255) */
        int idFeature;        /**<@brief  parent feature id (0 to ignore) */
        int isPlane;          /**<@brief  1 if face entity must be "planer" (0 to ignore) */
        int isHole;           /**<@brief  1 if face/edge must belong to a hole (0 to ignore) */
        int isLine;           /**<@brief  1 if curve or edge must be linear (0 to ignore) */
        evxEdgeType edgeType; /**<@brief  edge type (VX_EDGE_UNKNOWN to ignore) */

        /*  output */
        int idEntity; /**<@brief  id of entity found by search (0 if not found) */
        svxPoint Pnt; /**<@brief  projection of reference point onto entity */
        double Dist;  /**<@brief  distance from reference point to entity */
    } svxEntFind;

    /**
    @brief face search rules
    @ingroup zwapi_util
    */
    typedef enum evxFindRule
    {
        /*  stop condition, only for VX_FIND_CUSTOM (evxFaceFindType) type */
        VX_STOP_FACE_FILLET     = 0x00000001, /**<@brief  stop at fillet faces (fillets are added) */
        VX_STOP_EDGE_INNER_LOOP = 0x00000002, /**<@brief  stop at edges on inner loops on either face */
        VX_STOP_CONVEX_FLLT     = 0x00000004, /**<@brief  stop at convex fillet faces (fillets are added) */
        VX_STOP_CONCAVE_FLLT    = 0x00000008, /**<@brief  stop at concave fillet faces (fillets are added) */
        VX_STOP_CONVEX_EDGE     = 0x00000010, /**<@brief  stop at convex edges */
        VX_STOP_CONCAVE_EDGE    = 0x00000020, /**<@brief  stop at concave edges */
        VX_STOP_ADJACENCY_LEVEL = 0x00000040, /**<@brief  stop when face region grows through a set number of
                                             cycles, a face region grows in cycles, where the
                                             faces immediately adjacent to the seed are added in
                                             the first cycle, the faces immediately adjacent to
                                             those faces are added in the second cycle, and so on */
        VX_STOP_BOUNDARY_FACE   = 0x00000080, /**<@brief  stop at boundary faces */


        /*  find rules, only for VX_FIND_FINDER (evxFaceFindType) type */
        VX_FIND_COAXIAL   = 0x00000001, /**<@brief  find coaxial faces, seed face support cylinder,conical,sphere,torus */
        VX_FIND_TANGENT   = 0x00000002, /**<@brief  find faces which is tangent to the seed */
        VX_FIND_COPLANAR  = 0x00000004, /**<@brief  find faces which are in the same plane with the seed */
        VX_FIND_COPL_AXES = 0x00000008, /**<@brief  find faces whose axes are in the same plane with the seed,
                                                                                seed face support cylinder,conical */
        VX_FIND_EQU_RAD   = 0x00000010, /**<@brief  find faces whose radius is equal to the seed,
                                      seed face support cylinder and sphere */
        VX_FIND_SYMMETRIC = 0x00000020, /**<@brief  find symmetric faces, seed face support cylinder,conical */
        VX_FIND_OFFSET    = 0x00000040, /**<@brief  find face which has overlap regions with the seed and face normal
                                      is opposite, for a seed, only one offset face exists in a shape */
    } evxFindRule;

    //====================================================================================================================
    /** @name Variable */
    //====================================================================================================================
    /**
    @brief variable types
    @ingroup zwapi_util
    */
    typedef enum evxVarType
    {
        VX_VAR_NUM = 0, /**<@brief  number */
        VX_VAR_STR = 1, /**<@brief  string */
        VX_VAR_PNT = 2, /**<@brief  point */
        VX_VAR_VEC = 3  /**<@brief  vector */
    } evxVarType;

    /**
    @brief sub types of numeric variable
    @ingroup zwapi_util
    */
    typedef enum evxVarNumType
    {
        VX_VAR_CONS        = 0, /**<@brief  constant number (without unit) */
        VX_VAR_DST         = 1, /**<@brief  distance (evxUnitType) */
        VX_VAR_ANG         = 2, /**<@brief  angle (evxAngUnitType) */
        VX_VAR_MASS        = 3, /**<@brief  mass (evxMassUnitType) */
        VX_VAR_DENSITY     = 4, /**<@brief  density (evxDensityUnitType) */
        VX_VAR_AREA        = 5, /**<@brief  area (evxUnitType) */
        VX_VAR_VOLUME      = 6, /**<@brief  volume (evxUnitType) */
        VX_VAR_MASS_MOMENT = 7  /**<@brief  mass moment (evxMassMomentUnitType) */
    } evxVarNumType;

    /**
    @brief numeric variable
    @ingroup zwapi_util
    */
    typedef struct svxVariable
    {
        vxName Name;          /**<@brief  variable name */
        double Value;         /**<@brief  value is not required if Expression is defined */
        svxPoint pnt_val;     /**<@brief  the value of point is not required if Expression is defined */
        vxVarExp Expression;  /**<@brief  optional expression (Expression[0]=0 if undefined) */
        char type;            /**<@brief  variable type (value of evxVarType) */
        char sub_type;        /**<@brief  sub type of numeric variable (value of evxVarNumType) */
        char unit_type;       /**<@brief  unit type (see evxVarNumType), evxUnitType for point type */
        vxVarExp description; /**<@brief  optional description (description[0]=0 if undefined) */
    } svxVariable;

    //====================================================================================================================
    /** @name Face Attribute */
    //====================================================================================================================
    /**
    @brief face display attributes
    @ingroup zwapi_util
    */
    typedef struct svxFaceAt
    {
        unsigned char reflectance; /**<@brief  reflectance */
        unsigned char refraction;  /**<@brief  refraction */
        unsigned char exp;         /**<@brief  specular reflection exponent (0-128) */
        unsigned char trans;       /**<@brief  transparency setting (0-100) */
        unsigned char ambient;     /**<@brief  ambient reflection coeff. (0-100) */
        unsigned char diffuse;     /**<@brief  diffuse reflection coeff. (0-100) */
        unsigned char specular;    /**<@brief  specular reflection coeff. (0-100) */
        unsigned char emission;    /**<@brief  emission coeff. (0-100) */
        svxColor front_color;      /**<@brief  color of front side */
        svxColor back_color;       /**<@brief  color of back side */
        svxColor spec_color;       /**<@brief  specular color */
    } svxFaceAt;

    //====================================================================================================================
    /** @name Wire Attribute */
    //====================================================================================================================
    /**
    @brief line type ids for view attribute line types
    @ingroup zwapi_util
    */
    typedef enum evxViewLineAttrIdx
    {
        VX_VIS_LINE_ATTR          = 0,  /**<@brief  visible line attribute */
        VX_HID_LINE_ATTR          = 1,  /**<@brief  hidden line attribute */
        VX_TAN_LINE_ATTR          = 2,  /**<@brief  tangent line attribute */
        VX_SECT_LINE_ATTR         = 3,  /**<@brief  section line attribute */
        VX_DET_LINE_ATTR          = 4,  /**<@brief  detail border line attribute */
        VX_CENT_LINE_ATTR         = 5,  /**<@brief  center line attribute */
        VX_THRD_LINE_ATTR         = 6,  /**<@brief  thread line attribute */
        VX_VIEW_LINE_ATTR         = 7,  /**<@brief  view line attribute */
        VX_WIRE_LINE_ATTR         = 8,  /**<@brief  visible 3D curve attribute */
        VX_TAN_HID_LINE_ATTR      = 9,  /**<@brief  hidden tangent line attribute */
        VX_WIRE_HID_LINE_ATTR     = 10, /**<@brief  hidden 3D curve attribute */
        VX_CENT_HID_LINE_ATTR     = 11, /**<@brief  hidden center line attribute */
        VX_THRD_HID_LINE_ATTR     = 12, /**<@brief  hidden thread line attribute */
        VX_BEND_LINE_ATTR         = 13, /**<@brief  bend line attribute */
        VX_BEND_HID_LINE_ATTR     = 14, /**<@brief  hidden bend line attribute */
        VX_THRD_END_LINE_ATTR     = 15, /**<@brief  thread end line attribute */
        VX_THRD_END_HID_LINE_ATTR = 16, /**<@brief  hidden thread end line attribute */
        VX_CROP_LINE_ATTR         = 17, /**<@brief  crop line attribute */
    } evxViewLineAttrIdx;

    /**
    @brief wire display attributes
    @ingroup zwapi_util
    */
    typedef struct svxWireAt
    {
        unsigned char color; /**<@brief  color (0 if bundle undefined, else 1 through (VX_COLOR_LAST-1), ColorEnv[]) */
        unsigned char type;  /**<@brief  line/marker type ( >= 0) */
        unsigned char size;  /**<@brief  line/marker size ( >= 1) */
        char mode;           /**<@brief   display mode  
                             -3, permanently blanked  
                             -2, used for assembly alignment  
                             -1, blanked  
                             0, normal  
                             1, highlight  
                             2, lowlight  
                             3, highlight and change line style  
                             4, lowlight and change line style */
    } svxWireAt;

    //====================================================================================================================
    /** @name Profile Attribute */
    //====================================================================================================================
    /**
    @brief profile area property
    @ingroup zwapi_util
    */
    typedef struct svxPrfAreaProp
    {
        svxPoint2 org;      /**<@brief  Origin for calculating the properties */
        svxPoint2 centroid; /**<@brief  Centroid */

        double area; /**<@brief  Area */

        double Ix;  /**<@brief  Inertia about x axis at org*/
        double Iy;  /**<@brief  Inertia about y axis at org*/
        double Ir;  /**<@brief  Inertia about z axis at org */
        double Ixy; /**<@brief  Product of Inertia at org */

        double Kx; /**<@brief  Radius of Gyration about x axis at org */
        double Ky; /**<@brief  Radius of Gyration about y axis at org */
        double Kr; /**<@brief  Radius of Gyration about z axis at org */

        double Pmin; /**<@brief  Principal axis of which inertia is minimum */
        double Pmax; /**<@brief  Principal axis of which inertia is maximum */
        double Imin; /**<@brief  Inertia about Pmin */
        double Imax; /**<@brief  Inertia about Pmax */
    } svxPrfAreaProp;

    //====================================================================================================================
    /** @name Text Attribute */
    //====================================================================================================================
    /**
    @brief texture map option
    @ingroup zwapi_util
    */
    typedef enum evxTextureOpt
    {
        V_TEXTURE_NULL     = 0,
        V_TEXTURE_BLEND    = 1,
        V_TEXTURE_DECAL    = 2,
        V_TEXTURE_MODULATE = 3,
        V_TEXTURE_REPLACE  = 4
    } evxTextureOpt;

    /**
    @brief texture map origin point with respect to texture map rectangle
    @ingroup zwapi_util
    */
    typedef enum evxTextureLoc
    {
        V_TEXTURE_LOWER_LEFT  = 0,
        V_TEXTURE_UPPER_LEFT  = 1,
        V_TEXTURE_UPPER_RIGHT = 2,
        V_TEXTURE_LOWER_RIGHT = 3,
        V_TEXTURE_CENTER      = 4
    } evxTextureLoc;

    /**
    @brief texture attribute
    @ingroup zwapi_util
    */
    typedef struct svxTextureAt
    {
        evxTextureOpt opt;      /**<@brief  texture option (zero if undefined) */
        vxPath file;            /**<@brief  texture path/file name (blank if undefined) */
        unsigned char dimen;    /**<@brief  texture dimension (1-3) */
        unsigned char repeat;   /**<@brief  1 to repeat texture, else 0 */
        float trans;            /**<@brief  texture transparency (0 to 1.0) */
        double height;          /**<@brief  texture height (mm) */
        double width;           /**<@brief  texture width (mm) */
        double angle;           /**<@brief  texture angle (deg) */
        svxPoint origin;        /**<@brief  texture origin */
        int use_embed;          /**<@brief  as an input, 1 means a pre-existing embedded  
                           ** image takes precedence over file, 0 means file  
                           ** replaces any pre-existing embedded image; as  
                           ** an output, 1 means an embedded image exists  
                           ** for file, 0 means there is no embedded image. */
        evxTextureLoc location; /**<@brief  texture location relative to origin */
    } svxTextureAt;

    //====================================================================================================================
    /** @name Part Attribute */
    //====================================================================================================================
    /**
    @brief standard id of attribute item
    @ingroup zwapi_util
    */
    typedef enum evxAtItemId
    {
        /*  The standard id of the part attribute item. */
        VX_AT_USER   = 0,     /**<@brief  user defined attributes */
        VX_AT_NAME   = 1,     /**<@brief  part name */
        VX_AT_NUMBER = 2,     /**<@brief  part number */
        VX_AT_CLASS,          /**<@brief  CAM class */
        VX_AT_DESIGNER,       /**<@brief  designer */
        VX_AT_COST,           /**<@brief  cost */
        VX_AT_SUPPLIER,       /**<@brief  supplier */
        VX_AT_DESCRIPT,       /**<@brief  description */
        VX_AT_KEYWORD,        /**<@brief  keyword */
        VX_AT_MANAGER,        /**<@brief  manager */
        VX_AT_MATERIAL,       /**<@brief  material */
        VX_AT_START,          /**<@brief  create time */
        VX_AT_END,            /**<@brief  last modified time */
        VX_AT_DERIVED,        /**<@brief  derived from */
        VX_AT_NO_SECTION,     /**<@brief  do not section */
        VX_AT_NO_HATCH,       /**<@brief  do not hatch */
        VX_AT_NO_BOM,         /**<@brief  do not list in BOM */
        VX_AT_NO_ROOTSHOW,    /**<@brief  do not list in root manager */
        VX_AT_DENSITY   = 18, /**<@brief  density */
        VX_AT_FILEPATH  = 20, /**<@brief  file path */
        VX_AT_SHEETPATH = 21, /**<@brief  corresponded drawing sheet: FILE NAME,SHEET ROOT NAME */
        VX_AT_CAMPATH   = 22, /**<@brief  corresponded CAM object: FILE NAME,CAM ROOT NAME */
        VX_AT_SHEETCODE = 23, /**<@brief  sheet code */

        VX_AT_AREA       = 25, /**<@brief  area */
        VX_AT_VOLUME     = 26, /**<@brief  volume */
        VX_AT_MASS       = 27, /**<@brief  mass property */
        VX_AT_LENGTH     = 28, /**<@brief  length */
        VX_AT_WIDTH      = 29, /**<@brief  width */
        VX_AT_HEIGHT     = 30, /**<@brief  height */
        VX_AT_STOCK_SIZE = 43, /**<@brief  stock size */
        VX_AT_REVISION   = 47, /**<@brief  revision */

        /*  The standard id of the sheet attribute item. */
        VX_AT_SHEET_SCALE    = 200, /**<@brief  scale */
        VX_AT_SHEET_SEQUENCE = 201, /**<@brief  sequence */
        VX_AT_SHEET_AMOUNT,         /**<@brief  amount */
        VX_AT_SHEET_SIZE,           /**<@brief  size */
        VX_AT_SHEET_PROJECTION,     /**<@brief  projection */
        VX_AT_SHEET_FILEPATH,       /**<@brief  filepath */
    } evxAtItemId;

    /**
    @brief attribute data type
    @ingroup zwapi_util
    */
    typedef enum evxAttributeType
    {
        VX_ATTR_STRING = 0, /**<@brief  string */
        VX_ATTR_BOOL   = 1, /**<@brief  bool */
        VX_ATTR_INT    = 2, /**<@brief  integer */
        VX_ATTR_REAL   = 3, /**<@brief  real number */
        VX_ATTR_DATE   = 4, /**<@brief  date/time */
    } evxAttributeType;

    /**
    @brief date attribute format
    @ingroup zwapi_util
    */
    typedef enum evxDateFormat
    {
        VX_DATE_FROMAT_SHORT = 0, /**<@brief  short date */
        VX_DATE_FROMAT_LONG  = 1, /**<@brief  long date */
        VX_DATE_FROMAT1      = 2, /**<@brief  yyyy/M/D */
        VX_DATE_FROMAT2      = 3, /**<@brief  yyyy-M-D */
        VX_DATE_FROMAT3      = 4, /**<@brief  yyyy.M.D */
        VX_DATE_FROMAT4      = 5, /**<@brief  yy/M/D */
        VX_DATE_FROMAT5      = 6, /**<@brief  yy-M-D */
        VX_DATE_FROMAT6      = 7, /**<@brief  yy.M.D */
    } evxDateFormat;

    /**
    @brief standard attribute data
    @ingroup zwapi_util
    */
    typedef struct svxAttribute
    {
        char label[64];      /**<@brief  attribute label */
        char data[512];      /**<@brief  attribute data */
        double dValue;       /**<@brief  value for bool, integer, real number, date type */
        char type;           /**<@brief  attribute type (evxAttributeType) */
        char sub_type;       /**<@brief  sub type for real number type (use input type of evxNumType) */
        char unit;           /**<@brief  unit type for non-constant real number (evxUnitType, evxAngUnitType...) or date format (evxDateFormat) */
        char strValue[2048]; /**<@brief  attribute value */
        int has_eqn;         /**<@brief  flag to show whether there are some equations in "data/expression" */
    } svxAttribute;

    /**
    @brief part attribute structure
    @ingroup zwapi_util
    */
    typedef struct svxPartAttribute
    {
        int Version;                    /**<@brief  attribute version */
        int UserAttributeCount;         /**<@brief  count of UserAttribute */
        svxAttribute UserAttribute[64]; /**<@brief  user Attribute(Up to 64 user attributes). */
        svxAttribute Name;              /**<@brief  name attribute */
        svxAttribute Number;            /**<@brief  number attribute */
        svxAttribute Partclass;         /**<@brief  part class attribute */
        svxAttribute Designer;          /**<@brief  designer attribute */
        svxAttribute Cost;              /**<@brief  cost attribute */
        svxAttribute Supplier;          /**<@brief  supplier attribute */
        svxAttribute Description;       /**<@brief  description attribute */
        svxAttribute Keyword;           /**<@brief  keyword attribute */
        svxAttribute Manager;           /**<@brief  manager attribute */
        svxAttribute Material;          /**<@brief  material attribute */
        svxAttribute Startdate;         /**<@brief  start date attribute */
        svxAttribute Enddate;           /**<@brief  end date attribute */
        svxAttribute Derived;           /**<@brief  derived attribute */
        svxAttribute No_section;        /**<@brief  set "data" to "yes" or "no" */
        svxAttribute No_hatch;          /**<@brief  set "data" to "yes" or "no" */
        svxAttribute Dimen[20];         /**<@brief  dimension attribute, these attributes had been converted to a configuration table attributes or variables since R2018.  
                                                if there is a configuration table in current part, you can use cvxPartInqCfgTblInfos() to get and cvxCfgTblInfosSet() to modify.  
                                                or these attributes converted variables, you can use cvxPartVarGet() and cvxPartVarSet(). */
        svxAttribute No_bom;            /**<@brief  set "data" to "yes" or "no" */
        svxAttribute File_path;         /**<@brief   file path */
        svxAttribute No_rootshow;       /**<@brief  set "data" to "yes" or "no" */
        svxAttribute sheet_code;        /**<@brief  sheet code attribute */
    } svxPartAttribute;


    //====================================================================================================================
    /** @name Line Attribute */
    //====================================================================================================================
    /**
    @brief Line attributes
    @ingroup zwapi_util
    */
    typedef struct svxLineAt
    {
        evxColor color;     /**<@brief  line/marker color (VX_COLOR_NULL-VX_COLOR_LAST) */
        unsigned char type; /**<@brief  line/marker type (0-15) */
        unsigned char size; /**<@brief  line/marker size (1-6) */
    } svxLineAt;

    /**
    @brief line width
    @ingroup zwapi_util
    */
    typedef enum evxLineWidth
    {
        VX_WIDTH_UNDEFINED, /**<@brief  undefined */
        VX_WIDTH_018,       /**<@brief  0.18 mm */
        VX_WIDTH_025,       /**<@brief  0.25 mm */
        VX_WIDTH_035,       /**<@brief  0.35 mm */
        VX_WIDTH_050,       /**<@brief  0.50 mm */
        VX_WIDTH_070,       /**<@brief  0.70 mm */
        VX_WIDTH_100,       /**<@brief  1.00 mm */

        VX_WIDTH_BYLAYER = 0xFF, /**<@brief  by layer */
    } evxLineWidth;

/*
@brief point size 
@ingroup zwapi_util
*/
    typedef enum evxPointSize
    {
        VX_POINTSIZE_UNDEFINED, /* <@brief  undefined */
        VX_POINTSIZE_ONE,       /* <@brief  point size as 1 */
        VX_POINTSIZE_TWO,       /* <@brief  point size as 2 */
        VX_POINTSIZE_THREE,     /* <@brief  point size as 3 */
        VX_POINTSIZE_FOUR,      /* <@brief  point size as 4 */
        VX_POINTSIZE_FIVE,      /* <@brief  point size as 5 */
    } evxPointSize;

/*
@brief line style
@ingroup zwapi_util
*/
    typedef enum evxLineStyle
    {
        VX_LINESTYLE_UNDEFINED = -1, /* <@brief  undefined */
        VX_LINESTYLE_SOLID,          /* <@brief  line style as SOLID */
        VX_LINESTYLE_DOT,            /* <@brief  line style as DOT */
        VX_LINESTYLE_DASH,           /* <@brief  line style as DASH */
        VX_LINESTYLE_DASHDOT,        /* <@brief  line style as DASHDOT */
        VX_LINESTYLE_DASHDOTDOT,     /* <@brief  line style as DASHDOTDOT */
        VX_LINESTYLE_LONGDASHDOT,    /* <@brief  line style as LONGDASHDOT */
        VX_LINESTYLE_USER1           /* <@brief  line style as USER1 */
    } evxLineStyle;

/*
@brief point style
@ingroup zwapi_util
*/
    typedef enum evxPointStyle
    {
        VX_POINTSTYLE_UNDEFINED,     /* <@brief  undefined */
        VX_POINTSTYLE_POINT,         /* <@brief  point style as point */
        VX_POINTSTYLE_STRAIGHTCROSS, /* <@brief  point style as straight cross */
        VX_POINTSTYLE_ASTERISK,      /* <@brief  point style as asterisk */
        VX_POINTSTYLE_HOLLOWCIRCLE,  /* <@brief  point style as hollow circle */
        VX_POINTSTYLE_OBLIQUECROSS,  /* <@brief  point style as oblique cross */
        VX_POINTSTYLE_SQUARE,        /* <@brief  point style as square */
        VX_POINTSTYLE_TRIANGLE,      /* <@brief  point style as triangle */
        VX_POINTSTYLE_SLANTEDSQUARE, /* <@brief  point style as slanted square */
        VX_POINTSTYLE_SOLIDCIRCLE    /* <@brief  point style as solid circle */
    } evxPointStyle;

    //====================================================================================================================
    /** @name Text Attribute */
    //====================================================================================================================
    /**
    @brief text attribute
    @ingroup zwapi_util
    */
    typedef struct svxTextAt
    {
        unsigned char bold;      /**<@brief  bold flag 0-normal, 1-bold */
        unsigned char underline; /**<@brief  underline flag 0x01-ul,
                                         overline flag 0x02-ol,
                                         delete line flag 0x04-dl */
        unsigned char italic;    /**<@brief  italic flag 0-normal, 1-italic */
        unsigned char word_wrap; /**<@brief  fit method 0-none, 1-word wrap, 2-auto size text */
        char fontName[36];       /**<@brief  font name */

        float char_height;      /**<@brief  text height */
        float char_aspect;      /**<@brief  width of text, char_aspect = width / height */
        float multi_line_space; /**<@brief  Vertical spacing between text */
        float char_spacing;     /**<@brief  Horizontal spacing between text */

        evxColor color;
        unsigned char size;      /**<@brief  the  width of line */
        unsigned char precision; /**<@brief  text precision */
        unsigned char font_type; /**<@brief  font type (ex: proportional) */

        unsigned char hor_align_type;  /**<@brief  horizontal text alignment type */
        unsigned char hor_align;       /**<@brief  horizontal text alignment */
        unsigned char vert_align_type; /**<@brief  vertical text alignment type */
        unsigned char vert_align;      /**<@brief  vertical text alignment */

        float path;           /**<@brief  path of text as angle 0.0-360.0 degrees  */
        float text_angle;     /**<@brief  slope of text */
        float char_slant;     /**<@brief  slant of text */
        float text_expansion; /**<@brief  Multiplier for text expansion */

        float first_line_ind; /**<@brief  first line indent */
        float hanging_ind;    /**<@brief  hanging indent */
        float right_ind;      /**<@brief  right indent */
    } svxTextAt;

    //====================================================================================================================
    /** @name Command Input Data */
    //====================================================================================================================
    /**
    @brief numeric input data types
    @ingroup zwapi_util
    */
    typedef enum evxNumType
    {
        /*  output type   VeNumType*/
        VX_NUM_UNDEFINED  = -1, /**<@brief  undefined */
        VX_NUM_NULL       = 0,  /**<@brief  undefined */
        VX_NUM_TO_FACE    = 1,  /**<@brief  distance/angle to face */
        VX_NUM_FACE_BND   = 2,  /**<@brief  boundary face  */
        VX_NUM_TO_PNT     = 3,  /**<@brief  distance/angle to point */
        VX_NUM_THRU_PLUS  = 4,  /**<@brief  "through all" in positive direction */
        VX_NUM_THRU_MINUS = 5,  /**<@brief  "through all" in negative direction */
        VX_NUM_CURVE_BND  = 6,  /**<@brief  boundary curve */
        VX_NUM_DATA       = 7,  /**<@brief  number defined by a VDATA object */
        /*  input type   VeNumClass*/
        VX_UNDEF       = 0, /**<@brief  undefined */
        VX_NUM         = 1, /**<@brief  dimensionless number (e.g. curve degree) */
        VX_DST         = 2, /**<@brief  distance (mm) */
        VX_ANG         = 3, /**<@brief  angle (deg) */
        VX_MASS        = 4, /**<@brief  mass (kg) */
        VX_DENSITY     = 5, /**<@brief  density (kg/m3) */
        VX_AREA        = 6, /**<@brief  area (m2) */
        VX_VOLUME      = 7, /**<@brief  volume (m3) */
        VX_MASS_MOMENT = 8  /**<@brief  mass moments (kg.mm2) */
    } evxNumType;

    /**
    @brief point input data types
    @ingroup zwapi_util
    */
    typedef enum evxPntType
    {
        VX_PNT3_ABS      = 0,  /**<@brief  defined by absolute coord. in object space */
        VX_PNT3_ENT      = 1,  /**<@brief  entity "critical" point (start, end, mid, center) */
        VX_PNT3_ON       = 2,  /**<@brief  point on entity defined in entity parameter space */
        VX_PNT3_TO       = 3,  /**<@brief  point on entity for "tangent to" or "extend to" */
        VX_PNT3_MID      = 4,  /**<@brief  curve midpoint */
        VX_PNT3_NUM      = 5,  /**<@brief  point object stores dimensionless numeric input */
        VX_PNT3_DST      = 6,  /**<@brief  point object stores linear numeric input */
        VX_PNT3_ANG      = 7,  /**<@brief  point object stores angular numeric input */
        VX_PNT3_TAN      = 8,  /**<@brief  point on entity for "tangent to" */
        VX_PNT3_FRAC     = 9,  /**<@brief  point on curve defined as fraction of curve length */
        VX_PNT3_REL      = 10, /**<@brief  point defined relative to previous point */
        VX_PNT3_DATA     = 11, /**<@brief  point defined by a VDATA object */
        VX_PNT3_ABS_COMP = 12  /**<@brief  defined by abs coord in space of active component */
    } evxPntType;

    /**
    @brief system of angle units
    @ingroup zwapi_util
    */
    typedef enum evxAngUnitType
    {
        VX_UNIT_DEG = 8, /**<@brief  degree */
        VX_UNIT_RAD = 9  /**<@brief  radian */
    } evxAngUnitType;

    /**
    @brief command input data item
    @ingroup zwapi_util
    */
    typedef struct svxData
    {
        /*  flags indicating the types of data defined by this structure */
        char isPoint;       /**<@brief  1 if "Pnt" is defined, else 0 */
        char isEntity;      /**<@brief  1 if "idEntity" is defined, else 0 */
        char isNumber;      /**<@brief  1 if "Num" is defined, else 0 */
        char isDirection;   /**<@brief  1 if "Dir" is defined, else 0 */
        char isText;        /**<@brief  1 if "Text" is defined, else 0 */
        char isPntOnCrv;    /**<@brief  1 if point on curve, else 0.
                        ** idEntity="curve id"; Pnt="point coordinates";
                        ** Param[0]="curve t param"; idParent is optional.
                        ** For cvxPartAlign(), Param[0]="point id" in the control
                        ** point list. For example, Param[0]=2.0 means using the
                        ** the third control point.
                        */
        char isEndPnt;      /**<@brief  if "isPntOnCrv=1", set this flag to 1 if
                        ** Param[0] is to be used to identify the closest
                        ** endpoint on the specified curve (idEntity).
                        */
        char isPntOnFace;   /**<@brief  1 if point on face, else 0.
                        ** idEntity="face id"; Pnt="point coordinates";
                        ** Param[0]="u parameter"; Param[1]="v parameter".
                        */
                            /**<@brief  various parameters that may be defined (see the flags above) */
        int idEntity;       /**<@brief  entity/object id (0 if undefined) */
        int idParent;       /**<@brief  id of parent entity (0 if undefined) */
        evxNumType NumType; /**<@brief  numeric input type (input and output) */
        double Num;         /**<@brief  numeric value */
        evxPntType PntType; /**<@brief  point input type (output only) */
        svxPoint Pnt;       /**<@brief  point coordinates */
        svxVector Dir;      /**<@brief  unit direction vector */
        double Param[3];    /**<@brief  pick parameters (i.e. t value or point id) */
        char Text[512];     /**<@brief  text string (expression if "isNumber=1") */
        int chkRepeatEnt;   /**<@brief  1 if check whether the input entities are duplicated, else 0.default:0 */
    } svxData;

    //====================================================================================================================
    /** @name Curve Data */
    //====================================================================================================================
    /**
    @brief curve types
    @ingroup zwapi_util
    */
    typedef enum evxCurveType
    {
        VX_CRV_UNDEFINED = 0,
        VX_CRV_LINE      = 1,
        VX_CRV_ARC       = 2,
        VX_CRV_CIRCLE    = 3,
        VX_CRV_NURB      = 4
    } evxCurveType;

    /**
    @brief curve parameter space data
    @ingroup zwapi_util
    */
    typedef struct svxParameters
    {
        int closed;    /**<@brief  1=closed curve, 0=open curve */
        int degree;    /**<@brief  degree (order = deg + 1) */
        int num_knots; /**<@brief  number of knots */
        svxLimit bnd;  /**<@brief  boundaries of parameter space */
        double *knots; /**<@brief  array of knot values */
        int free_mem;  /**<@brief  1 if memory referenced by "knots" should
                        ** be free'd by cvxCurveFree()
                        */
    } svxParameters;

    /**
    @brief curve control point data
    @ingroup zwapi_util
    */
    typedef struct svxControlPoints
    {
        int rat;       /**<@brief  1=RATIONAL, 0=NONRATIONAL control points  */
        int dim;       /**<@brief  number of coordinates per control point (1-4) */
        int plane;     /**<@brief  cp hyper plane type: 1:pnt, 2:line, 3:plane  */
        int num_cp;    /**<@brief  number of control points in list */
        svxBndBox box; /**<@brief  bounding box of control points */
        double *coord; /**<@brief  control point coordinates  (possibly weighted) */
                       /**<@brief  if RATIONAL, points are of form (wx,wy,wz,w) */
        int free_mem;  /**<@brief  1 if memory referenced by "coord" should
                        ** be free'd by cvxCurveFree()
                        */
    } svxControlPoints;

    /**
    @brief data of curve continuity.
    @ingroup zwapi_util
    */
    typedef struct svxCrvContinuityData
    {
        int idCrv1;                /**<@brief id of curve1 */
        int idCrv2;                /**<@brief id of curve2 */
        double position;           /**<@brief Check this option to inquire the continuity of G0 position between the picked curves. */
        int isPositionContinuous;  /**<@brief 1 is continuous position, else 0. */
        double tangent;            /**<@brief Check this option to inquire the continuity of G1 tangent between the picked curves. */
        int isTangentContinuous;   /**<@brief 1 is continuous tangent, else 0. */
        double curvature;          /**<@brief Check this option to inquire the continuity of G2 curvature between the picked curves. */
        int isCurvatureContinuous; /**<@brief 1 is continuous curvature, else 0. */
        double flow;               /**<@brief Check this option to inquire the continuity of G3 flow between the picked curves. */
        int isFlowContinuous;      /**<@brief 1 is continuous flow, else 0. */
    } svxCrvContinuityData;

    /**
    @brief curve continuity tolerance list
    @ingroup zwapi_util
    */
    typedef struct svxCrvContinuityTolList
    {
        double tolPosition;  /**<@brief tolerance of position.default:0.01
                            Judge whether the two curves are G0 continuous tolerance.(in millimeters). */
        double tolTangent;   /**<@brief tolerance of tangent.default:0.5
                            Judge whether the two curves are G2 continuous tolerance.(degrees). */
        double tolCurvature; /**<@brief tolerance of curvature.default:0.05
                            Judge whether the two curves are G2 continuous tolerance. */
        double tolFlow;      /**<@brief tolerance of flew.default:0.05
                            Judge whether the two curves are G3 continuous tolerance. */
    } svxCrvContinuityTolList;

    /**
    @brief 2D or 3D curvilinear geometry
    @ingroup zwapi_util
    */
    typedef struct svxCurve
    {
        evxCurveType Type; /**<@brief  curve type */
        svxMatrix Frame;   /**<@brief  local frame (origin is center of 3D circle/arc) */

        svxPoint P1, P2; /**<@brief  line start/end points or center of 2D circle/arc */
        double A1, A2;   /**<@brief  arc start/end angles (degrees) */
        double R;        /**<@brief  circle/arc radius */

        svxParameters T;    /**<@brief  NURB parameter space data */
        svxControlPoints P; /**<@brief  NURB control point data (mm) */
    } svxCurve;

    //====================================================================================================================
    /** @name Surface Data */
    //====================================================================================================================
    /**
    @brief surface types
    @ingroup zwapi_util
    */
    typedef enum evxSurfaceType
    {
        VX_SRF_PLANE,
        VX_SRF_SPHERE,
        VX_SRF_CONE,
        VX_SRF_GRID,
        VX_SRF_CYLINDER,
        VX_SRF_EXTRUDE,
        VX_SRF_REVOLVE,
        VX_SRF_SWEEP_NOT_USED,
        VX_SRF_GEN,
        VX_SRF_OFFSET,
        VX_SRF_MESH,
        VX_SRF_RULED,
        VX_SRF_HEMIS,
        VX_SRF_FRUSTRUM,
        VX_SRF_DRAFT,
        VX_SRF_DRAFT_NPLN,
        VX_SRF_DRAFT_NUV,
        VX_SRF_ELLIPSOID,
        VX_SRF_3PT_PLANE,
        VX_SRF_BILIN_CNVX,
        VX_SRF_EXTRUDE_DRFT,
        VX_SRF_REVOLVE_PLN,
        VX_SRF_TORUS,
        VX_SRF_SMD_THCK_FC,
        VX_SRF_BEND_GEN,
        VX_SRF_PLANE_STAT_FC,
        VX_SRF_GEN_STAT_FC,
        VX_SRF_CIR_OFF,
        VX_SRF_VAR_OFF,
        VX_SRF_THRD_THDFC,
        VX_SRF_THRD_NTHDFC,
        VX_SRF_THRD_CONFC
    } evxSurfaceType;

    /**
    @brief 3D NURB surface (untrimmed)
    @ingroup zwapi_util
    */
    typedef struct svxSurface
    {
        evxSurfaceType Type; /**<@brief  surface type */
        int OutNormal;       /**<@brief  1 if the surface's natural normal points towards
                        ** the outside of the shape it is associated with;
                        ** 0 if the surface's natural normal points inward.
                        */
        svxParameters U;     /**<@brief  NURB parameter space data in U direction */
        svxParameters V;     /**<@brief  NURB parameter space data in V direction */
        svxControlPoints P;  /**<@brief  NURB control point data (mm) */
    } svxSurface;

    /**
    @brief 3D NURB surface type
    @ingroup zwapi_util
    */
    typedef enum evxSrfPrimType
    {
        VX_SF_PRIM_PLN,   /**<@brief  plane */
        VX_SF_PRIM_SPH,   /**<@brief  sphere */
        VX_SF_PRIM_CON,   /**<@brief  cone */
        VX_SF_PRIM_CYL,   /**<@brief  cylinder */
        VX_SF_PRIM_NURB,  /**<@brief  nurbs surface */
        VX_SF_PRIM_ELLSO, /**<@brief  ellipsoid */
        VX_SF_PRIM_TORUS  /**<@brief  torus */
    } evxSrfPrimType;

    /**
    @brief data of plane
    @ingroup zwapi_util
    */
    typedef struct svxPlane
    {
        double xlen;    /**<@brief  extents of the XY plane */
        double ylen;    /**<@brief  extents in the XY plane */
        svxMatrix form; /**<@brief  plane centered about xform */
    } svxPlane;

    /**
    @brief spherical surface data
    @ingroup zwapi_util
    */
    typedef struct svxSphere
    {
        double radius;  /**<@brief  radius */
        svxMatrix form; /**<@brief  sphere centered about xform */
        int poleis01;   /**<@brief  = 1 : poles (if they exist) are at extreme V parameters
                           = 0 : poles (if they exist) are at extreme U parameters */
    } svxSphere;

    /**
    @brief conical surface data
    @ingroup zwapi_util
    */
    typedef struct svxCone
    {
        double radius1; /**<@brief  bottom (lo u or v) radius */
        double radius2; /**<@brief  top (hi u or v) radius. */
        double length;  /**<@brief  cone len between Max(radius1,radius2) and apex (length of the axis)*/
        svxMatrix form; /**<@brief  cone centered about xform  
                           origin is at large radius  
                           z-axis points from large radius to apex.  
                           x-axis point to seam */
        int lindir;     /**<@brief  = 1 : u defines the linear direction.  
                           = 2 : v defines the linear direction. */
    } svxCone;

    /**
    @brief cylindrical surface data
    @ingroup zwapi_util
    */
    typedef struct svxCylinder
    {
        double radius;  /**<@brief  radius */
        double length;  /**<@brief  length */
        svxMatrix form; /**<@brief  cylinder centered about xform  
                           origin is at low parameter value  
                           z-axis points from low parameter to high
                              parameter.  
                           x-axis point to seam */
        int lindir;     /**<@brief  = 1 : u defines the linear direction.  
                           = 2 : v defines the linear direction. */
    } svxCylinder;

    /**
    @brief circular surface data
    @ingroup zwapi_util
    */
    typedef struct svxTorus
    {
        double dPathRadius; /**<@brief  revolve path or spine radius */
        double dProfRadius; /**<@brief  xsect or profile radius */
        svxMatrix form;     /**<@brief  torus centered about xform  
                              z-axis points out of plane  
                              x-axis point to seam */
        int fSpineDir;      /**<@brief  = 1 : u defines the spine direction.  
                              = 0 : v defines the spine direction. */
        int fApplemon;      /**<@brief  = 1 : Apple  
                              = 2 : Lemon */
    } svxTorus;

    /**
    @brief ellipsoid surface data
    @ingroup zwapi_util
    */
    typedef struct svxEllipsoid
    {
        double xlen;    /**<@brief  length along x-axis */
        double ylen;    /**<@brief  length along y-axis */
        double zlen;    /**<@brief  length along z-axis */
        svxMatrix form; /**<@brief  ellipsoid centered about xform */
        int poleis01;   /**<@brief  = 1 : poles (if they exist) are at extreme V parameters  
                              = 0 : poles (if they exist) are at extreme U parameters */
    } svxEllipsoid;

    /**
    @brief 3D NURB surface data
    @ingroup zwapi_util
    */
    typedef struct svxSrfPrim
    {
        evxSrfPrimType srfType; /**<@brief  surface type */
        union
        {
            svxPlane pln;       /**<@brief  data of plane */
            svxSphere sph;      /**<@brief  spherical surface data */
            svxCone con;        /**<@brief  conical surface data */
            svxCylinder cyl;    /**<@brief  cylindrical surface data */
            svxSurface srf;     /**<@brief  nurbs surface data */
            svxEllipsoid ellso; /**<@brief  ellipsoid surface data */
            svxTorus torus;     /**<@brief  circular surface data */
        } srfData;
    } svxSrfPrim;

    //====================================================================================================================
    /** @name Facets */
    //====================================================================================================================
    /**
    @brief shader attribute
    @ingroup zwapi_util
    */
    typedef struct svxShaderAt
    {
        vxName name;       /**<@brief  shader name (blank if undefined) */
        vxPath file;       /**<@brief  shader path/file name (blank if undefined) */
        svxColor color[4]; /**<@brief  shader colors */
        double param[10];  /**<@brief  shader parameters */
    } svxShaderAt;

    /**
    @brief 3D facets defined by triangle strips
    @ingroup zwapi_util
    */
    typedef struct svxFacets
    {
        int numTriStrip;   /**<@brief  number of triangle strips in TriStrip list */
        int *TriStrip;     /**<@brief  list of integer indices that define triangle strips
                        **
                        ** This list has the format "num_vertices_in_strip_1,  
                        ** index_of_vertex_1,index_of_vertex_2,...,index_of_vertex_N,  
                        ** num_vertices_in_strip_2,..." where an index is an offset  
                        ** into the list of Vertex/Normal/ST/UV/RGB coordinates, numbered  
                        ** from 0.  A triangle strip defined by N vertices defines  
                        ** N-2 triangles.  For example, if a triangle strip is  
                        ** defined by 5 vertices whose indices are {0,1,2,3,4},  
                        ** then it contains 3 triangles defined by vertices {0,1,2},  
                        ** {2,1,3} and {2,3,4} (when using data from a triangle strip,  
                        ** note that vertex order is implicitly reversed for alternating  
                        ** triangles when calculating the implied normal direction  
                        ** of each triangle's plane). */
        int numVertex;     /**<@brief   number of vertices in Vertex list */
        svxPointf *Vertex; /**<@brief   list of vertex coordinates (x,y,z) */
        svxPointf *Normal; /**<@brief   list of vertex normals (i,j,k unit direction vector);
                        ** Normal is optional and may be NULL */
        svxPoint2f *ST;    /**<@brief   list of vertex texture coordinates (s,t from 0.0 to 1.0);
                        ** ST is optional and may be NULL */
        svxFaceAt At;      /**<@brief   optional display attributes */
        svxTextureAt Tx;   /**<@brief   optional texture attributes */
        svxShaderAt Sh;    /**<@brief   optional shader attributes */
        svxPoint2f *UV;    /**<@brief   list of UV coordinates corresponding to vertex coordinates;
                        ** UV is optional and may be NULL */
        svxColorf *RGB;    /**<@brief   list of vertex colors (r,g,b components from 0.0 to 1.0;
                        ** see cvxColorfToColor() for conversion to svxColor);
                        ** RGB is optional and may be NULL
                        ** (NOTE: The RGB field is a placeholder for a future enhancement
                        ** and is not yet supported.  Colors assigned to this field will
                        ** be ignored when a facet block is displayed.) */
    } svxFacets;
    //====================================================================================================================
    /** @name Dimension */
    //====================================================================================================================
    /**
    @brief dimension type
    @ingroup zwapi_util
    */
    typedef enum evxDimType
    {
        VX_DIM_LINEAR           = 1, /**<@brief  Linear dimension */
        VX_DIM_BASELINE         = 2, /**<@brief  Baseline dimension */
        VX_DIM_CONTINUOUS       = 3, /**<@brief  Continuous dimension */
        VX_DIM_ORDINATE         = 4, /**<@brief  Ordinate dimension */
        VX_DIM_LINEAR_OFFSET    = 5, /**<@brief  Linear Offset dimension */
        VX_DIM_LINEAR_CHAMFER   = 6, /**<@brief  Linear Chamfer dimension */
        VX_DIM_ANGULAR          = 7, /**<@brief  Angular dimension */
        VX_DIM_RADIAL_DIAMETRIC = 8, /**<@brief  Radial/Diametric dimension */
        VX_DIM_ARC_LENGTH       = 9, /**<@brief  Arc Length dimension */
        VX_DIM_SYMMETRY,             /**<@brief  Symmetry dimension*/
        VX_DIM_HLCALL,               /**<@brief  hole call out */
        VX_DIM_LABEL,                /**<@brief  leader label */
        VX_DIM_BALLOON,              /**<@brief  balloon */
        VX_DIM_DATUMF,               /**<@brief  datum feature */
        VX_DIM_DATUMT,               /**<@brief  datum target */
        VX_DIM_FCS,                  /**<@brief  feature control symbol */
        VX_DIM_CLCM,                 /**<@brief  centerline/center mark */
        VX_DIM_INTERSYM,             /**<@brief  intersection symbol */
        VX_DIM_LAST
    } evxDimType;

    /**
    @brief dimension type, more detailed than evxDimType
    @ingroup zwapi_util
    */
    typedef enum evxDimTypeEx
    {
        VX_DIM_EX_FIRST = 0,

        VX_DIM_EX_LH = 1,  /**<@brief horizontal dimension */
        VX_DIM_EX_LV = 5,  /**<@brief vertical dimension */
        VX_DIM_EX_LA = 9,  /**<@brief aligned dimension */
        VX_DIM_EX_LR = 13, /**<@brief rotated dimension */
        VX_DIM_EX_LP = 17, /**<@brief projected dimension */

        VX_DIM_EX_LHB = 2,  /**<@brief horizontal baseline dimension */
        VX_DIM_EX_LVB = 6,  /**<@brief vertical baseline dimension */
        VX_DIM_EX_LAB = 10, /**<@brief aligned baseline dimension */
        VX_DIM_EX_LRB = 14, /**<@brief rotated baseline dimension */
        VX_DIM_EX_LPB = 18, /**<@brief projected baseline dimension */

        VX_DIM_EX_LHC = 3,  /**<@brief horizontal continuous dimension */
        VX_DIM_EX_LVC = 7,  /**<@brief vertical continuous dimension */
        VX_DIM_EX_LAC = 11, /**<@brief aligned continuous dimension */
        VX_DIM_EX_LRC = 15, /**<@brief rotated continuous dimension */
        VX_DIM_EX_LPC = 19, /**<@brief projected continuous dimension */

        VX_DIM_EX_LHO  = 4,  /**<@brief horizontal ordinate dimension */
        VX_DIM_EX_LVO  = 8,  /**<@brief vertical ordinate dimension */
        VX_DIM_EX_LAO  = 12, /**<@brief aligned ordinate dimension */
        VX_DIM_EX_LRO  = 16, /**<@brief rotated ordinate dimension */
        VX_DIM_EX_LPO  = 20, /**<@brief projected ordinate dimension */
        VX_DIM_EX_LHVO = 88, /**<@brief horizontal and vertical ordinate dimension */

        VX_DIM_EX_LO  = 21, /**<@brief offset dimension */
        VX_DIM_EX_LOS = 25, /**<@brief special offset dimension - point to line */

        VX_DIM_EX_LSY = 90, /**<@brief symmetry dimension */
        VX_DIM_EX_ASY = 93, /**<@brief Angular symmetry dimension */

        VX_DIM_EX_LCHV = 26, /**<@brief horizontal-vertical chamfer dimension */
        VX_DIM_EX_LCA  = 29, /**<@brief aligned chamfer dimension */
        VX_DIM_EX_LCL  = 30, /**<@brief leader chamfer dimension */
        VX_DIM_EX_LCLP = 80, /**<@brief leader chamfer dimension (always perpendicular) */
        VX_DIM_EX_LCLA = 83, /**<@brief leader chamfer dimension (always along the chamfered line) */

        VX_DIM_EX_ANG    = 48, /**<@brief angular dimension */
        VX_DIM_EX_ANGH   = 52, /**<@brief horizontal-angular dimension */
        VX_DIM_EX_ANGV   = 56, /**<@brief vertical-angular dimension */
        VX_DIM_EX_ANGA   = 60, /**<@brief angular arc dimension */
        VX_DIM_EX_ANG3PT = 74, /**<@brief 3 point angular dimension */

        VX_DIM_EX_RAD   = 31, /**<@brief radial dimension */
        VX_DIM_EX_RADBG = 35, /**<@brief big radial dimension */
        VX_DIM_EX_RADBK = 39, /**<@brief broken radial dimension */
        VX_DIM_EX_DIA   = 44, /**<@brief diametrical dimension */
        VX_DIM_EX_RADL  = 76, /**<@brief radial leader dimension */

        VX_DIM_EX_GDH  = 70, /**<@brief horizontal datum (1982) dimension */
        VX_DIM_EX_GDV  = 71, /**<@brief vertical datum (1982) dimension */
        VX_DIM_EX_GDHS = 77, /**<@brief horizontal datum symbol (1994) dimension */
        VX_DIM_EX_GDVS = 78, /**<@brief vertical datum symbol (1994) dimension */
        VX_DIM_EX_GDL  = 81, /**<@brief leader datum (1994) dimension (circle, arc, curves) */
        VX_DIM_EX_GDLS = 82, /**<@brief leader datum (1994) dimension (line) */

        VX_DIM_EX_GDTP = 72, /**<@brief GD&T datum target point dimension */
        VX_DIM_EX_GDTC = 73, /**<@brief GD&T datum target area dimension */
        VX_DIM_EX_GDTR = 84, /**<@brief GD&T datum target rectangle area dimension */
        VX_DIM_EX_GDTL = 85, /**<@brief GD&T datum target line area dimension */

        VX_DIM_EX_LOB      = 22, /**<@brief offset baseline dimension */
        VX_DIM_EX_LOC      = 23, /**<@brief offset continuous dimension */
        VX_DIM_EX_LOO      = 24, /**<@brief offset ordinate dimension */
        VX_DIM_EX_LCH      = 27, /**<@brief horizontal chamfer dimension */
        VX_DIM_EX_LCV      = 28, /**<@brief vertical chamfer dimension */
        VX_DIM_EX_RADB     = 32, /**<@brief radial baseline dimension */
        VX_DIM_EX_RADC     = 33, /**<@brief radial continuous dimension */
        VX_DIM_EX_RADO     = 34, /**<@brief radial ordinate dimension */
        VX_DIM_EX_RADBGB   = 36, /**<@brief big radial baseline dimension */
        VX_DIM_EX_RADBGC   = 37, /**<@brief big radial continuous dimension */
        VX_DIM_EX_RADBGO   = 38, /**<@brief big radial ordinate dimension */
        VX_DIM_EX_RADBKB   = 40, /**<@brief broken radial baseline dimension */
        VX_DIM_EX_RADBKC   = 41, /**<@brief broken radial continuous dimension */
        VX_DIM_EX_RADBKO   = 42, /**<@brief broken radial ordinate dimension */
        VX_DIM_EX_RADS     = 43, /**<@brief special radial dimension */
        VX_DIM_EX_DIAB     = 45, /**<@brief diametrical baseline dimension */
        VX_DIM_EX_DIAC     = 46, /**<@brief diametrical continuous dimension */
        VX_DIM_EX_DIAO     = 47, /**<@brief diametrical ordinate dimension */
        VX_DIM_EX_ANGB     = 49, /**<@brief baseline angular dimension */
        VX_DIM_EX_ANGC     = 50, /**<@brief continuous angular dimension */
        VX_DIM_EX_ANGO     = 51, /**<@brief ordinate angular dimension */
        VX_DIM_EX_ANGHB    = 53, /**<@brief baseline horizontal-angular dimension */
        VX_DIM_EX_ANGHC    = 54, /**<@brief continuous horizontal-angular dimension */
        VX_DIM_EX_ANGHO    = 55, /**<@brief ordinate horizontal-angular dimension */
        VX_DIM_EX_ANGVB    = 57, /**<@brief baseline vertical-angular dimension */
        VX_DIM_EX_ANGVC    = 58, /**<@brief continuous vertical-angular dimension */
        VX_DIM_EX_ANGVO    = 59, /**<@brief ordinate vertical-angular dimension */
        VX_DIM_EX_ANGAB    = 61, /**<@brief baseline angular arc dimension */
        VX_DIM_EX_ANGAC    = 62, /**<@brief continuous angular arc dimension */
        VX_DIM_EX_ANGAO    = 63, /**<@brief ordinate angular arc dimension */
        VX_DIM_EX_LEAD     = 64, /**<@brief leader dimension */
        VX_DIM_EX_BALL     = 65, /**<@brief balloon dimension */
        VX_DIM_EX_CM       = 66, /**<@brief centerline/centermark dimension */
        VX_DIM_EX_GF       = 67, /**<@brief GD&T/feature symbol dimension */
        VX_DIM_EX_GFL      = 68, /**<@brief leader GD&T/feature symbol dimension */
        VX_DIM_EX_GFP      = 69, /**<@brief profile GD&T/feature symbol dimension */
        VX_DIM_EX_LCLS     = 75, /**<@brief special chamfer leader dimension */
        VX_DIM_EX_CLC      = 79, /**<@brief centerline curve */
        VX_DIM_EX_CLBS     = 86, /**<@brief bisection centerline */
        VX_DIM_EX_ARCL     = 87, /**<@brief arc length */
        VX_DIM_EX_INTSYM   = 89, /**<@brief intersection symbol dimension */
        VX_DIM_EX_LORD     = 91, /**<@brief leader coordinate dimension */
        VX_DIM_EX_DPLS     = 92, /**<@brief datum projection dimension (line) */
        VX_DIM_EX_CRVL     = 94, /**<@brief spline curve length dimension */
        VX_DIM_EX_RHO      = 95, /**<@brief conic ratio Rho */
        VX_DIM_EX_CRVL3D   = 96, /**<@brief curve length */
        VX_DIM_EX_ELEV     = 97, /**<@brief elevation dimension */
        VX_DIM_EX_AUTO_LSY = 98, /**<@brief auto symmetric dimension */
        VX_DIM_EX_LAST     = 99
    } evxDimTypeEx;

    /**
    @brief dimension Line Mode
    @ingroup zwapi_util
    */
    typedef enum evxDimLineMode
    {
        VX_DIM_LINE_MODE_B = 2, /**<@brief  lingrp baseline */
        VX_DIM_LINE_MODE_C = 3, /**<@brief  lingrp continuous */
        VX_DIM_LINE_MODE_O = 4, /**<@brief  lingrp ordinate */
    } evxDimLineMode;

    /**
    @brief dimension state
    @ingroup zwapi_util
    */
    typedef enum evxDimState
    {
        VX_DM_REVISION = -4, /**<@brief  revision dimension*/
        VX_DM_NOSCALE  = -3, /**<@brief  not scale dimension */
        VX_DM_MODIFIED = -2, /**<@brief  modified dimension */
        VX_DM_DANGLING = -1, /**<@brief  dangling dimension */
        VX_DM_NORMAL   = 0,  /**<@brief  default, normal state */
        VX_DM_IN_OBJ   = 1,  /**<@brief  the dimension is in other object, only need text display data */
    } evxDimState;

    /**
    @brief FCS MD&T symbol
    @ingroup zwapi_util
    */
    typedef enum evxFCSSymbol
    {
        VX_FCSSYM_NONE = 0,           /**<@brief  none */
        VX_FCSSYM_STRAIGHTNESS,       /**<@brief  straightness */
        VX_FCSSYM_FLATNESS,           /**<@brief  flatness */
        VX_FCSSYM_CIRCULARITY,        /**<@brief  circularity */
        VX_FCSSYM_CYLINDRICITY,       /**<@brief  cylindricity */
        VX_FCSSYM_PARALLELISM,        /**<@brief  parallelism */
        VX_FCSSYM_PERPENDICULARITY,   /**<@brief  perpendicularity */
        VX_FCSSYM_ANGULARITY,         /**<@brief  angularity */
        VX_FCSSYM_POSITION,           /**<@brief  position */
        VX_FCSSYM_CONCENTRICITY,      /**<@brief  concentricity */
        VX_FCSSYM_SYMMETRY,           /**<@brief  symmetry */
        VX_FCSSYM_PROFILE_OF_LINE,    /**<@brief  profile of a line */
        VX_FCSSYM_PROFILE_OF_SURFACE, /**<@brief  profile of a surface */
        VX_FCSSYM_CIRCULAR_RUNOUT,    /**<@brief  circular run-out */
        VX_FCSSYM_TOTAL_RUNOUT,       /**<@brief  total run-out */
    } evxFCSSymbol;

    /**
    @brief FCS area shape symbol
    @ingroup zwapi_util
    */
    typedef enum evxFCSShapeSym
    {
        VX_SHP_NONE = 0,      /**<@brief  none */
        VX_SHP_DIAMETER,      /**<@brief  diameter */
        VX_SHP_SPHERICAL_DIA, /**<@brief  spherical diameter */
        VX_SHP_SQUARE,        /**<@brief  square */
    } evxFCSShapeSym;

    /**
    @brief FCS LMS option
    @ingroup zwapi_util
    */
    typedef enum evxFCSLmsOption
    {
        VX_LMS_NONE = 0,            /**<@brief  none */
        VX_LMS_MAX_MATERIAL,        /**<@brief  maximum material condition */
        VX_LMS_MIN_MATERIAL,        /**<@brief  least material condition */
        VX_LMS_FTR_SIZE_REGARDLESS, /**<@brief  regardless of feature size */
    } evxFCSLmsOption;

    /**
    @brief FCS tolerance data
    @ingroup zwapi_util
    */
    typedef struct svxFCSTol
    {
        int isValid;             /**<@brief  valid data (0-no, 1-yes) */
        evxFCSShapeSym shapeSym; /**<@brief  area shape symbol */
        vxLongName tol;          /**<@brief  tolerance */
        evxFCSLmsOption lmsOpt;  /**<@brief  LMS options */
        int freeState;           /**<@brief  free state (0-no, 1-yes) */
        int tangentPlane;        /**<@brief  tangent plane (0-no, 1-yes) */
        int projTolFlag;         /**<@brief  projected tolerance flag (0-no, 1-yes) */
        vxLongName projTol;      /**<@brief  projected tolerance */
        int statisticalTol;      /**<@brief  statistical tolerance (0-no, 1-yes) */
    } svxFCSTol;

    /**
    @brief FCS datum data
    @ingroup zwapi_util
    */
    typedef struct svxFCSDatum
    {
        int isValid;            /**<@brief  valid data (0-no, 1-yes) */
        vxLongName datum;       /**<@brief  datum */
        evxFCSLmsOption lmsOpt; /**<@brief  LMS options */
        int freeState;          /**<@brief  free state (0-no, 1-yes) */
    } svxFCSDatum;

    /**
    @brief FCS data
    @ingroup zwapi_util
    */
    typedef struct svxFCSData
    {
        evxFCSSymbol sym;        /**<@brief  FCS's MD&T symbol */
        svxFCSTol tol[2];        /**<@brief  FCS's tolerance */
        svxFCSDatum datum[3][3]; /**<@brief  FCS's datum */
    } svxFCSData;

    /**
    @brief terminator types
    @ingroup zwapi_util
    */
    typedef enum evxTermType
    {
        VX_TERM_OFF      = 0, /**<@brief  arrowhead style: suppressed */
        VX_TERM_ARROW_15 = 1, /**<@brief  arrowhead style: arrow with 15-degree angle */
        VX_TERM_ARROW_30,     /**<@brief  arrowhead style: arrow with 30-degree angle */
        VX_TERM_ARROW_60,     /**<@brief  arrowhead style: arrow with 60-degree angle */
        VX_TERM_ARROW_H15,    /**<@brief  arrowhead style: unfilled triangle with 15-degree angle */
        VX_TERM_ARROW_H30,    /**<@brief  arrowhead style: unfilled triangle with 30-degree angle */
        VX_TERM_ARROW_H60,    /**<@brief  arrowhead style: unfilled triangle with 60-degree angle */
        VX_TERM_ARROW_HF15,   /**<@brief  arrowhead style: filled triangle with 15-degree angle */
        VX_TERM_ARROW_HF30,   /**<@brief  arrowhead style: filled triangle with 30-degree angle */
        VX_TERM_ARROW_HF60,   /**<@brief  arrowhead style: filled triangle with 60-degree angle */
        VX_TERM_TICK,         /**<@brief  arrowhead style: tick */
        VX_TERM_DOT,          /**<@brief  arrowhead style: unfilled point */
        VX_TERM_DOTF          /**<@brief  arrowhead style: filled point */
    } evxTermType;

    /**
    @brief data sub-items of hole dimension
    @ingroup zwapi_util
    */
    typedef enum evxHoleDimDataItem
    {
        VX_HOLE_DIM_ITEM_ORG,       /**<@brief  original variable string */
        VX_HOLE_DIM_ITEM_QTY,       /**<@brief  number of same holes: <H_Q> */
        VX_HOLE_DIM_ITEM_DIA,       /**<@brief  hole diameter D1: <H_D1> */
        VX_HOLE_DIM_ITEM_DIA2,      /**<@brief  hole diameter D2: <H_D2> */
        VX_HOLE_DIM_ITEM_LABEL,     /**<@brief  hole label: <H_L> */
        VX_HOLE_DIM_ITEM_DPTH,      /**<@brief  hole depth H1: <H_H1> */
        VX_HOLE_DIM_ITEM_DPTH2,     /**<@brief  hole depth H2: <H_H2> */
        VX_HOLE_DIM_ITEM_ANG,       /**<@brief  hole angle: <H_A> */
        VX_HOLE_DIM_ITEM_THRD_DIA,  /**<@brief  hole thread diameter: <H_TD> */
        VX_HOLE_DIM_ITEM_THRD_DPTH, /**<@brief  hole thread depth: <H_TH> */
        VX_HOLE_DIM_ITEM_PITCH,     /**<@brief  hole thread pitch: <H_TP> */
        VX_HOLE_DIM_THRD_STD,       /**<@brief  hole thread: <H_TS> */
        VX_HOLE_DIM_THRD_SIZ,       /**<@brief  hole thread size without pitch: <H_TZ> */
    } evxHoleDimDataItem;

    /**
    @brief Dimension attributes structure
    @ingroup zwapi_util
    */
    typedef struct svxDimAttr
    {
        char prefix[32];              /**<@brief  dimension prefix */
        char suffix[32];              /**<@brief  dimension suffix */
        char tolPlus[8];              /**<@brief  tolerance plus */
        char tolMinus[8];             /**<@brief  tolerance minus */
        char fontName[36];            /**<@brief  font name */
        int extLnClr;                 /**<@brief  extension lines color (evxColor) */
        int dimLnClr;                 /**<@brief  dimension lines color (evxColor) */
        int dimTxtClr;                /**<@brief  dimension text color (evxColor) */
        int symbolClr;                /**<@brief  symbol color */
        int valFmt;                   /**<@brief  dimension value text format
                           (1-no tol, 2-limit, 3-unequal tol, 4-equal tol, 5-tol zone, 6-fit tol) */
        int zeroSupp;                 /**<@brief  zero suppression (1-none, 2-lead, 3-trail, 4-both) */
        int decPlc;                   /**<@brief  dimension text decimal places */
        double chHgt;                 /**<@brief  text height */
        double chAsp;                 /**<@brief  text character aspect ratio */
        double chLnSpc;               /**<@brief  text character multi-line spacing */
        double chSpc;                 /**<@brief  text character spacing ratio */
        double chSlant;               /**<@brief  slant angle of text */
        double tolChHgtFac;           /**<@brief  tolerance text height scaling factor */
        int dimTxtOrient;             /**<@brief  dimension text orientation(>=1) */
        int LeaderAlign;              /**<@brief  dimension line (or leader) justification(0-center, 1-top, 2-half, 3-bottom) */
        evxTermType trmTyp1;          /**<@brief  arrowhead1 type */
        evxTermType trmTyp2;          /**<@brief  arrowhead2 type */
        int dimLineSize;              /**<@brief  dimension line size(1-6) */
        int extLineSize;              /**<@brief  extension line size(1-6) */
        int dimLineType;              /**<@brief  dimension line type(0-5) */
        int extLineType;              /**<@brief  extension line type(0-5) */
        int dimTxtBold;               /**<@brief  dim. text bold flag (0-normal, 1-bold) */
        int dimPrefixFlag;            /**<@brief  radial, diameter, and chamfer prefix on/off(0-on, 1-off) */
        int altUnitFlag;              /**<@brief  1 if use alternate unites, else 0 */
        int showUnit;                 /**<@brief  show unit,(0-both not, 1-show main dim unit, 2-show unit for alt., 3-both ) */
        int tolDecPlc;                /**<@brief  tolerance precision */
        int altDecPlc;                /**<@brief  unit precision, if altUnitFlag = 1, apply it */
        int altTolDecPlc;             /**<@brief  tolerance precision, if altUnitFlag = 1, apply it */
        evxUnitType altUnitTyp;       /**<@brief  alternate unit type */
        evxAngUnitType angAltUnitTyp; /**<@brief  angular alternate unit type */
        int suppLeader;               /**<@brief  1 if suppress the leader, else 0 */
        int trmSuppFlg1;              /**<@brief  suppress arrowhead1 flag (0-on, 1-off) */
        int trmSuppFlg2;              /**<@brief  suppress arrowhead2 flag (0-on, 1-off) */
        double trmSize1;              /**<@brief  arrowhead1 size */
        double trmSize2;              /**<@brief  arrowhead2 size */
    } svxDimAttr;

    //====================================================================================================================
    /** @name Component Info */
    //====================================================================================================================
    /**
    @brief brief component info
    @ingroup zwapi_util
    */
    typedef struct svxCompName
    {
        vxLongPath File; /**<@brief  name of file that contains "Part" */
        vxRootName Part; /**<@brief  name of part to instance as a component */
    } svxCompName;

    //====================================================================================================================
    /** @name Curve/Surface Extension Options */
    //====================================================================================================================
    /**
    @brief curve/surface extension options
    @ingroup zwapi_util
    */
    typedef enum evxExtendOpt
    {
        VX_EXTEND_UNDEFINED = 0, /**<@brief  linear extend is the default when extension is undefined */
        VX_EXTEND_LINEAR    = 1,
        VX_EXTEND_CIRCULAR  = 2,
        VX_EXTEND_REFLECT   = 3
    } evxExtendOpt;

    //====================================================================================================================
    /** @name 2D/3D Curve Data */
    //====================================================================================================================
    /**
    @brief fairing modes
    @ingroup zwapi_util
    */
    typedef enum evxFairingType
    {
        VX_FAIRING_NONE      = 0, /**<@brief  none */
        VX_FAIRING_ENERGY    = 1, /**<@brief  energy */
        VX_FAIRING_VARIATION = 2, /**<@brief  variation */
        VX_FAIRING_JERK      = 3, /**<@brief  jerk */
        VX_FAIRING_BEND      = 4, /**<@brief  bend */
        VX_FAIRING_TENSION   = 5, /**<@brief  tension */
    } evxFairingType;

    /**
    @brief 2D/3D interpolated curve
    @ingroup zwapi_util
    */
    typedef struct svxCrvIntData
    {
        /*  required inputs */
        int isClosed;     /**<@brief  1 if curve is closed, 0 if open */
        int Degree;       /**<@brief  curve degree (2 - 6) */
        int Count;        /**<@brief  number of points to interpolate */
        svxPoint *Points; /**<@brief  pointer to list of points to interpolate */
                          /**<@brief  (set Z coordinate to zero for 2D curves) */

        /*  optional inputs */
        int UseStartTan;    /**<@brief  1 to use start tangent direction, else 0 */
        svxVector StartTan; /**<@brief  normalized start tangent direction vector */
        double StartScale;  /**<@brief  start tangent scale factor (0.1 - 10.0, 1.0 as default) */

        int UseEndTan;    /**<@brief  1 to use start tangent direction, else 0 */
        svxVector EndTan; /**<@brief  normalized end tangent direction vector */
        double EndScale;  /**<@brief  end tangent scale factor (0.1 - 10.0, 1.0 as default) */

        int Fairing; /**<@brief  fairing type(0-None, 1-Energy, 2-Variation, 3-Jerk, 4-Bend, 5-Tension)*/
    } svxCrvIntData;


    /**
    @brief Continuity option
    @ingroup zwapi_util
    */
    typedef enum evxContinuityTyp
    {
        VX_CONTIN_NONE = 0, /**<@brief  none*/
        VX_CONTIN_G1   = 1, /**<@brief  tangent */
        VX_CONTIN_G2   = 2, /**<@brief  curvature */
        VX_CONTIN_G3   = 3, /**<@brief  flow */
    } evxContinuityTyp;

    /**
    @brief Spline point
    @ingroup zwapi_util
    */
    typedef struct svxSplinePnt
    {
        svxPoint Pnt; /**<@brief  point */
        int UseCons;  /**<@brief  1-use the constraints data ,else 0 (0 as default) */
        /*  set following parameters when useCons = 1 */
        evxContinuityTyp ContinuityTyp; /**<@brief  continuity type (VX_NONE as default)*/
        svxVector TangDir;              /**<@brief  tangent direction at this point (ContinuityTyp != VX_CONTIN_NONE)*/
        int UseG1Manitude;              /**<@brief  1-use G1 magnitude, else 0 (0 as default) */
        double dG1Manitude;             /**<@brief  G1 magnitude (use this when UseG1Manitude != 0 ) */
        int UseG2Radius;                /**<@brief  1-use G2 radius, else 0 (0 as default) */
        double dG2Radius;               /**<@brief  G2 radius(use this when UseG2Radius != 0)*/
        int FlipDir;                    /**<@brief  1-flip the TangDir, else 0 (0 as default) */
    } svxSplinePnt;

    /**
    @brief placing adjustment type
    @ingroup zwapi_util
    */
    typedef enum evxPlacingType
    {
        VX_PLACING_NONE   = -1, /**<@brief  none , 2d spline default value */
        VX_PLACING_VIEW   = 0,  /**<@brief  view , 3d spline default value */
        VX_PLACING_VECTOR = 1,  /**<@brief  vector */
        VX_PLACING_WCS    = 2,  /**<@brief  WCS */
        VX_PLACING_PLANE  = 3,  /**<@brief  PLANE */
    } evxPlacingType;

    /**
    @brief Spline command data
    @ingroup zwapi_util
    */
    typedef struct svxSplineData
    {
        /*  ------------------common---------------- */
        int SplineTyp;      /**<@brief  0- through point, 1- control point (0 as default)) */
        int Count;          /**<@brief  count of points */
        svxSplinePnt *Pnts; /**<@brief  point list */
        int Degree;         /**<@brief  degree (3 as default) */

        /*  the following parameters used when SplineTyp = 0 */
        int CreateCrvOpen; /**<@brief  1-create curve open, 0-create close curve(1 as default) */
        int Fairing;       /**<@brief  fairing type(0-None, 1-Energy, 2-Variation, 3-Jerk, 4-Bend, 5-Tension) */
        /*  the following parameters used when SplineTyp = 1 */
        int SingleSeg; /**<@brief  single segment (0 as default) */

        /*  -------------placing adjustment ------------------*/
        evxPlacingType PlacingTyp; /**<@brief  placing adjustment type */
        svxVector PlacingDir;      /**<@brief  Placing adjustment director
                                (PlacingTyp = VX_PLACING_VECTOR)*/
                                   /**<@brief  the following parameters used when create 3d curve */
        int UseOrient;             /**<@brief  1-use orientation tool
                                (0 as default, PlacingTyp = VX_PLACING_VIEW)*/
        svxEntPath PlacingPln;     /**<@brief reference fram (part entity path can be initialized as(PlacingPln.Count = 2; PlacingPln.Id={-1, idFace}) )
                                (PlacingTyp = VX_PLACING_PLANE) */
        int PlacingPrj;            /**<@brief  1-project to plane, else 0
                                (0 as default, PlacingTyp = VX_PLACING_PLANE) */

        /*  --------------setting------------------*/
        /* the following parameters used when create 3d curve*/
        svxEntPath AlignPlane; /**<@brief  align plane (part entity path can be initialized as(alignEnt.Count = 2; alignEnt.Id={-1, idFace}) ) */
        int PrjToPln;          /**<@brief  1-project to the align plane, else 0 (1 as default) */
        int PntOnPln;          /**<@brief  1-points on align plane, else 0 (1 as default) */
        int AlignTyp;          /**<@brief  Align type, 0-auto, 1-select, (1 as default) */
    } svxSplineData;

    //====================================================================================================================
    /** @name View Data */
    //====================================================================================================================
    /**
    @brief view data(Z3PRT,Z3ASM)
    @ingroup zwapi_util
    */
    typedef struct svxView
    {
        vxName Name;      /**<@brief  view name */
        svxMatrix Matrix; /**<@brief  view matrix (i.e. transform) */
        float Extent;     /**<@brief  view extent */
        float FrontDist;  /**<@brief  distance from view origin to front clip plane */
        float BackDist;   /**<@brief  distance from view origin to back clip plane */
        float PRP_Dist;   /**<@brief  distance from view origin to projection reference point (PRP) */
        char Display;     /**<@brief  1-display this view, 0-don't display this view */
        char Clip;        /**<@brief  1-clip to front/back plane, 0-don't clip */
        char Project;     /**<@brief  projection method, 0-parallel, 1-perspective */
    } svxView;

    /**
    @brief standard 3D view orientations
    @ingroup zwapi_util
    */
    typedef enum evxViewStd
    {
        VX_VIEW_FRONT  = 0,
        VX_VIEW_BACK   = 1,
        VX_VIEW_TOP    = 2,
        VX_VIEW_BOTTOM = 3,
        VX_VIEW_RIGHT  = 4,
        VX_VIEW_LEFT   = 5,
        VX_VIEW_ISO    = 6,
        VX_VIEW_AUX    = 7,
        VX_VIEW_PLANE  = 8
    } evxViewStd;

    //====================================================================================================================
    /** @name ZW3D environment */
    //====================================================================================================================

    /**
    @brief zw3d environment
    @ingroup zwapi_util
    */
    typedef enum evxEnvironment
    {
        VX_ENV_Z3FILE = 2,    /**<@brief  Z3File */
        VX_ENV_SKETCH,        /**<@brief  sketch */
        VX_ENV_SHEET,         /**<@brief  sheet */
        VX_ENV_PACKET,        /**<@brief  packet */
        VX_ENV_CAM,           /**<@brief  cam */
        VX_ENV_ANIMATION,     /**<@brief  animation */
        VX_ENV_EXPLODEDVIEW,  /**<@brief  explodedView */
        VX_ENV_3DSKETCH,      /**<@brief  3Dsketch */
        VX_ENV_PART,          /**<@brief  part */
        VX_ENV_ECAD_PART,     /**<@brief  ECAD part */
        VX_ENV_ECAD_ASSEMBLY, /**<@brief  ECAD assembly */
        VX_ENV_ASSEMBLY,      /**<@brief  Assembly */
        VX_ENV_PIPING         /**<@brief  piping */
    } evxEnvironment;

    //====================================================================================================================
    /** @name Cam Data */
    //====================================================================================================================

    /**
    @brief cam data attribute type
    @ingroup zwapi_util
    */
    typedef enum evxCmAttrValueType
    {
        ZW_CAM_ATTR_VALUE_TYPE_INVALID = -1,
        ZW_CAM_ATTR_VALUE_TYPE_INTEGER = 0,
        ZW_CAM_ATTR_VALUE_TYPE_DOUBLE,
        ZW_CAM_ATTR_VALUE_TYPE_STRING
    } evxCmAttrValueType;

    /**
    @brief cam data attribute value
    @ingroup zwapi_util
    */
    typedef struct svxCmAttrValue
    {
        evxCmAttrValueType type; /**<@brief  cam data attribute type */
        int cnt;                 /**<@brief  count of data */
        void *data;              /**<@brief  user is response to free this memory */
    } svxCmAttrValue;

    /**
    @brief cam plan display mode
    @ingroup zwapi_util
    */
    typedef enum evxCmPlanDispMode
    {
        CM_ACTIVE_LOCK     = 0,  /**<@brief  lock */
        CM_ACTIVE_PART     = 1,  /**<@brief  part */
        CM_ACTIVE_PROCESS  = 2,  /**<@brief  process */
        CM_ACTIVE_SETUP    = 3,  /**<@brief  setup */
        CM_ACTIVE_TOOLPATH = 4,  /**<@brief  toolpath */
        CM_ACTIVE_MACHINE  = 5,  /**<@brief  machine */
        CM_ACTIVE_TOOL     = 6,  /**<@brief  tool */
        CM_ACTIVE_TACTIC   = 7,  /**<@brief  tactic */
        CM_ACTIVE_SPDFD    = 8,  /**<@brief  spdfd */
        CM_ACTIVE_CMCOMP   = 9,  /**<@brief  cmcomp */
        CM_ACTIVE_FTRGRP   = 10, /**<@brief  ftrgrp */
        CM_ACTIVE_FTRSET   = 11, /**<@brief  ftrset */
        CM_ACTIVE_NEST     = 12, /**<@brief  nest */
        CM_ACTIVE_WIZARD   = 13, /**<@brief  wizard */
        CM_ACTIVE_PUNCH    = 14, /**<@brief  punch */
        CM_ACTIVE_HOLDER   = 15  /**<@brief  holder */
    } evxCmPlanDispMode;

    /**
    @brief cam tree type
    @ingroup zwapi_util
    */
    typedef enum evxCmTreeType
    {
        CM_TREE_OP   = 0, /**<@brief opdef in tree */
        CM_TREE_COMP = 1, /**<@brief component in tree */
        CM_TREE_FLD  = 2, /**<@brief folder in tree */
        CM_TREE_FTR  = 3, /**<@brief ftr in tree */

    } evxCmTreeType;

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ZW_API_UTIL_H */
